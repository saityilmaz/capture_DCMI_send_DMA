
CaptureDCMI_SendDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c4c  08006c4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e40a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205a  00000000  00000000  0002e4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00030508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  00031028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f2d  00000000  00000000  00031a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa18  00000000  00000000  000549b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3654  00000000  00000000  000643cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137a21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003150  00000000  00000000  00137a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800697c 	.word	0x0800697c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800697c 	.word	0x0800697c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ov7670_write>:
    }

}

int ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
  if(HAL_I2C_Mem_Write(&hi2c2, DevAdrr_T, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) == HAL_OK)
 80005a4:	2342      	movs	r3, #66	; 0x42
 80005a6:	b299      	uxth	r1, r3
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	1dbb      	adds	r3, r7, #6
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <ov7670_write+0x4c>)
 80005bc:	f003 fbaa 	bl	8003d14 <HAL_I2C_Mem_Write>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <ov7670_write+0x36>
	  return 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e006      	b.n	80005d8 <ov7670_write+0x44>
  else{
	  HAL_UART_Transmit(&huart4,(uint8_t*) "ov7670_write has FAILED \r\n", sizeof("ov7670_write has FAILED \r\n"), 20);
 80005ca:	2314      	movs	r3, #20
 80005cc:	221b      	movs	r2, #27
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <ov7670_write+0x50>)
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <ov7670_write+0x54>)
 80005d2:	f004 fd6c 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 80005d6:	2300      	movs	r3, #0
  };
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000012c 	.word	0x2000012c
 80005e4:	080069fc 	.word	0x080069fc
 80005e8:	20000180 	.word	0x20000180

080005ec <ov7670_init>:


int ov7670_init()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  if(ov7670_write(0x12, 0x80)){   // Resets the camera
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	2012      	movs	r0, #18
 80005f4:	f7ff ffce 	bl	8000594 <ov7670_write>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00a      	beq.n	8000614 <ov7670_init+0x28>
	  HAL_Delay(50);
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 feae 	bl	8001360 <HAL_Delay>
	  HAL_UART_Transmit(&huart4,(uint8_t*) "ov7670_init - RESET Operation of the Camera is completed. \r\n", sizeof("ov7670_init - RESET Operation of the Camera is completed. \r\n"), 20);
 8000604:	2314      	movs	r3, #20
 8000606:	223d      	movs	r2, #61	; 0x3d
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <ov7670_init+0x3c>)
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <ov7670_init+0x40>)
 800060c:	f004 fd4f 	bl	80050ae <HAL_UART_Transmit>
	  return 1;
 8000610:	2301      	movs	r3, #1
 8000612:	e006      	b.n	8000622 <ov7670_init+0x36>
  } else{
	  HAL_UART_Transmit(&huart4, (uint8_t*) "ov7670_init - RESET operation is FAILED. \r\n", sizeof("ov7670_init - RESET operation is FAILED. \r\n"), 20);
 8000614:	2314      	movs	r3, #20
 8000616:	222c      	movs	r2, #44	; 0x2c
 8000618:	4905      	ldr	r1, [pc, #20]	; (8000630 <ov7670_init+0x44>)
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <ov7670_init+0x40>)
 800061c:	f004 fd47 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 8000620:	2300      	movs	r3, #0
  }
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	08006a18 	.word	0x08006a18
 800062c:	20000180 	.word	0x20000180
 8000630:	08006a58 	.word	0x08006a58

08000634 <ov7670_config>:




int ov7670_config()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  char aTxBuffer[1] = {0xAA};
 800063a:	23aa      	movs	r3, #170	; 0xaa
 800063c:	703b      	strb	r3, [r7, #0]
  if(HAL_DCMI_Stop(&hdcmi) != HAL_OK){     // ?????????????????
 800063e:	482f      	ldr	r0, [pc, #188]	; (80006fc <ov7670_config+0xc8>)
 8000640:	f001 f864 	bl	800170c <HAL_DCMI_Stop>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <ov7670_config+0x26>
	  HAL_UART_Transmit(&huart4,(uint8_t*) "ov7670_config - HAL_DCMI_Stop FAILED. \r\n", sizeof("ov7670_config - HAL_DCMI_Stop FAILED. \r\n"), 20);
 800064a:	2314      	movs	r3, #20
 800064c:	2229      	movs	r2, #41	; 0x29
 800064e:	492c      	ldr	r1, [pc, #176]	; (8000700 <ov7670_config+0xcc>)
 8000650:	482c      	ldr	r0, [pc, #176]	; (8000704 <ov7670_config+0xd0>)
 8000652:	f004 fd2c 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 8000656:	2300      	movs	r3, #0
 8000658:	e04c      	b.n	80006f4 <ov7670_config+0xc0>
  } else if(ov7670_write(0x12, 0x80) != 1)  {  // RESET
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	2012      	movs	r0, #18
 800065e:	f7ff ff99 	bl	8000594 <ov7670_write>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d007      	beq.n	8000678 <ov7670_config+0x44>
	  HAL_UART_Transmit(&huart4,(uint8_t*) "ov7670_config - RESET FAILED. \r\n", sizeof("ov7670_config - RESET FAILED. \r\n"), 20);
 8000668:	2314      	movs	r3, #20
 800066a:	2221      	movs	r2, #33	; 0x21
 800066c:	4926      	ldr	r1, [pc, #152]	; (8000708 <ov7670_config+0xd4>)
 800066e:	4825      	ldr	r0, [pc, #148]	; (8000704 <ov7670_config+0xd0>)
 8000670:	f004 fd1d 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 8000674:	2300      	movs	r3, #0
 8000676:	e03d      	b.n	80006f4 <ov7670_config+0xc0>
  } else{
	  ;
  }

  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	e033      	b.n	80006e6 <ov7670_config+0xb2>
	HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f000 fe6e 	bl	8001360 <HAL_Delay>
    if(ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]) != 1){
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <ov7670_config+0xd8>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800068c:	491f      	ldr	r1, [pc, #124]	; (800070c <ov7670_config+0xd8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	440b      	add	r3, r1
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	4619      	mov	r1, r3
 8000698:	4610      	mov	r0, r2
 800069a:	f7ff ff7b 	bl	8000594 <ov7670_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d01d      	beq.n	80006e0 <ov7670_config+0xac>
    	HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fe5b 	bl	8001360 <HAL_Delay>
    	HAL_UART_Transmit(&huart4,(uint8_t*) "ov7670_config has FAILED when i = ", sizeof("ov7670_config has FAILED when i = "), 20);
 80006aa:	2314      	movs	r3, #20
 80006ac:	2223      	movs	r2, #35	; 0x23
 80006ae:	4918      	ldr	r1, [pc, #96]	; (8000710 <ov7670_config+0xdc>)
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <ov7670_config+0xd0>)
 80006b2:	f004 fcfc 	bl	80050ae <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart4, (uint8_t*)aTxBuffer, sprintf(aTxBuffer, "%d", i), 20);
 80006b6:	463b      	mov	r3, r7
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4916      	ldr	r1, [pc, #88]	; (8000714 <ov7670_config+0xe0>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f005 fcef 	bl	80060a0 <siprintf>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4639      	mov	r1, r7
 80006c8:	2314      	movs	r3, #20
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <ov7670_config+0xd0>)
 80006cc:	f004 fcef 	bl	80050ae <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart4, (uint8_t*) "\r\n", 2, 20);
 80006d0:	2314      	movs	r3, #20
 80006d2:	2202      	movs	r2, #2
 80006d4:	4910      	ldr	r1, [pc, #64]	; (8000718 <ov7670_config+0xe4>)
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <ov7670_config+0xd0>)
 80006d8:	f004 fce9 	bl	80050ae <HAL_UART_Transmit>
    	return 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	e009      	b.n	80006f4 <ov7670_config+0xc0>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <ov7670_config+0xd8>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80006ee:	2bff      	cmp	r3, #255	; 0xff
 80006f0:	d1c5      	bne.n	800067e <ov7670_config+0x4a>
    }
  }
  return 1;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	08006a84 	.word	0x08006a84
 8000704:	20000180 	.word	0x20000180
 8000708:	08006ab0 	.word	0x08006ab0
 800070c:	08006b94 	.word	0x08006b94
 8000710:	08006ad4 	.word	0x08006ad4
 8000714:	08006af8 	.word	0x08006af8
 8000718:	08006afc 	.word	0x08006afc

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	f5ad 3d16 	sub.w	sp, sp, #153600	; 0x25800
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fda9 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f8f9 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 fa31 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000732:	f000 f9f9 	bl	8000b28 <MX_DMA_Init>
  MX_DCMI_Init();
 8000736:	f000 f965 	bl	8000a04 <MX_DCMI_Init>
  MX_I2C2_Init();
 800073a:	f000 f98b 	bl	8000a54 <MX_I2C2_Init>
  MX_UART4_Init();
 800073e:	f000 f9c9 	bl	8000ad4 <MX_UART4_Init>
  /* USER CODE BEGIN WHILE */



  // Arrange the RESET and PWDN pins
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	486d      	ldr	r0, [pc, #436]	; (8000900 <main+0x1e4>)
 800074a:	f003 f985 	bl	8003a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWD_GPIO_Port, DCMI_PWD_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	486a      	ldr	r0, [pc, #424]	; (8000900 <main+0x1e4>)
 8000756:	f003 f97f 	bl	8003a58 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fe00 	bl	8001360 <HAL_Delay>
  // Read the address of the I2C Channel
  if(HAL_I2C_IsDeviceReady(&hi2c2, DevAdrr_T, 3, 100) != HAL_OK){
 8000760:	2342      	movs	r3, #66	; 0x42
 8000762:	b299      	uxth	r1, r3
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2203      	movs	r2, #3
 8000768:	4866      	ldr	r0, [pc, #408]	; (8000904 <main+0x1e8>)
 800076a:	f003 fbcd 	bl	8003f08 <HAL_I2C_IsDeviceReady>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d007      	beq.n	8000784 <main+0x68>
	  HAL_UART_Transmit(&huart4,(uint8_t*) "FAIL - Transmit address is NOT ready \r\n", sizeof("FAIL - Transmit address is not READY \r\n"), 20);
 8000774:	2314      	movs	r3, #20
 8000776:	2228      	movs	r2, #40	; 0x28
 8000778:	4963      	ldr	r1, [pc, #396]	; (8000908 <main+0x1ec>)
 800077a:	4864      	ldr	r0, [pc, #400]	; (800090c <main+0x1f0>)
 800077c:	f004 fc97 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 8000780:	2300      	movs	r3, #0
 8000782:	e0b6      	b.n	80008f2 <main+0x1d6>
  }

  if(HAL_I2C_IsDeviceReady(&hi2c2, DevAdrr_R, 3, 100) != HAL_OK){
 8000784:	2343      	movs	r3, #67	; 0x43
 8000786:	b299      	uxth	r1, r3
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2203      	movs	r2, #3
 800078c:	485d      	ldr	r0, [pc, #372]	; (8000904 <main+0x1e8>)
 800078e:	f003 fbbb 	bl	8003f08 <HAL_I2C_IsDeviceReady>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d007      	beq.n	80007a8 <main+0x8c>
	  HAL_UART_Transmit(&huart4,(uint8_t*) "FAIL - Receive address is NOT ready \r\n", sizeof("FAIL - Receive address is not READY \r\n"), 20);
 8000798:	2314      	movs	r3, #20
 800079a:	2227      	movs	r2, #39	; 0x27
 800079c:	495c      	ldr	r1, [pc, #368]	; (8000910 <main+0x1f4>)
 800079e:	485b      	ldr	r0, [pc, #364]	; (800090c <main+0x1f0>)
 80007a0:	f004 fc85 	bl	80050ae <HAL_UART_Transmit>
	  return 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e0a4      	b.n	80008f2 <main+0x1d6>
  }


	// Initialization
	ov7670_init();
 80007a8:	f7ff ff20 	bl	80005ec <ov7670_init>

	// Camera Configuration
	if(ov7670_config())
 80007ac:	f7ff ff42 	bl	8000634 <ov7670_config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d005      	beq.n	80007c2 <main+0xa6>
		HAL_UART_Transmit(&huart4, (uint8_t*) "Configuration is completed with success \r\n", sizeof("Configuration is completed with success \r\n"), 20);
 80007b6:	2314      	movs	r3, #20
 80007b8:	222b      	movs	r2, #43	; 0x2b
 80007ba:	4956      	ldr	r1, [pc, #344]	; (8000914 <main+0x1f8>)
 80007bc:	4853      	ldr	r0, [pc, #332]	; (800090c <main+0x1f0>)
 80007be:	f004 fc76 	bl	80050ae <HAL_UART_Transmit>

	HAL_Delay(500);
 80007c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c6:	f000 fdcb 	bl	8001360 <HAL_Delay>

	uint32_t cameraBuffer[CAMERA_FRAME_BUFFER_SIZE] = {0};
 80007ca:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80007ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80007d2:	4618      	mov	r0, r3
 80007d4:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80007d8:	461a      	mov	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f005 fc58 	bl	8006090 <memset>
  	uint16_t start_bit = 0xBEBE;
 80007e0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80007e4:	f6a3 0302 	subw	r3, r3, #2050	; 0x802
 80007e8:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80007ec:	801a      	strh	r2, [r3, #0]
  	uint16_t stop_bit = 0xDEDE;
 80007ee:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80007f2:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 80007f6:	f64d 62de 	movw	r2, #57054	; 0xdede
 80007fa:	801a      	strh	r2, [r3, #0]

  while (1)
  {

	   memset(&cameraBuffer, 0xCE, CAMERA_FRAME_BUFFER_SIZE*4);
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8000804:	21ce      	movs	r1, #206	; 0xce
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fc42 	bl	8006090 <memset>

	   if(HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, &cameraBuffer, CAMERA_FRAME_BUFFER_SIZE) != HAL_OK){
 800080c:	f107 0208 	add.w	r2, r7, #8
 8000810:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000814:	2102      	movs	r1, #2
 8000816:	4840      	ldr	r0, [pc, #256]	; (8000918 <main+0x1fc>)
 8000818:	f000 fed8 	bl	80015cc <HAL_DCMI_Start_DMA>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d007      	beq.n	8000832 <main+0x116>
		   HAL_UART_Transmit(&huart4,(uint8_t *) "DCMI_Start_Failed \r\n", sizeof("DCMI_Start_Failed \r\n"), 20);
 8000822:	2314      	movs	r3, #20
 8000824:	2215      	movs	r2, #21
 8000826:	493d      	ldr	r1, [pc, #244]	; (800091c <main+0x200>)
 8000828:	4838      	ldr	r0, [pc, #224]	; (800090c <main+0x1f0>)
 800082a:	f004 fc40 	bl	80050ae <HAL_UART_Transmit>
			return 0;
 800082e:	2300      	movs	r3, #0
 8000830:	e05f      	b.n	80008f2 <main+0x1d6>
		}

		HAL_Delay(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000836:	f000 fd93 	bl	8001360 <HAL_Delay>

		HAL_DCMI_Suspend(&hdcmi);
 800083a:	4837      	ldr	r0, [pc, #220]	; (8000918 <main+0x1fc>)
 800083c:	f000 ffc2 	bl	80017c4 <HAL_DCMI_Suspend>
		HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f000 fd8d 	bl	8001360 <HAL_Delay>
		HAL_DCMI_Stop(&hdcmi);
 8000846:	4834      	ldr	r0, [pc, #208]	; (8000918 <main+0x1fc>)
 8000848:	f000 ff60 	bl	800170c <HAL_DCMI_Stop>

		HAL_Delay(10);
 800084c:	200a      	movs	r0, #10
 800084e:	f000 fd87 	bl	8001360 <HAL_Delay>


		HAL_UART_Transmit(&huart4,(uint8_t *) &start_bit, 2, 20);
 8000852:	f507 41b0 	add.w	r1, r7, #22528	; 0x5800
 8000856:	f101 0106 	add.w	r1, r1, #6
 800085a:	f5a1 41b0 	sub.w	r1, r1, #22528	; 0x5800
 800085e:	2314      	movs	r3, #20
 8000860:	2202      	movs	r2, #2
 8000862:	482a      	ldr	r0, [pc, #168]	; (800090c <main+0x1f0>)
 8000864:	f004 fc23 	bl	80050ae <HAL_UART_Transmit>
		HAL_Delay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fd79 	bl	8001360 <HAL_Delay>
		HAL_UART_Transmit(&huart4, cameraBuffer, CAMERA_FRAME_BUFFER_SIZE, HAL_MAX_DELAY);
 800086e:	f107 0108 	add.w	r1, r7, #8
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800087a:	4824      	ldr	r0, [pc, #144]	; (800090c <main+0x1f0>)
 800087c:	f004 fc17 	bl	80050ae <HAL_UART_Transmit>
	    HAL_Delay(5);
 8000880:	2005      	movs	r0, #5
 8000882:	f000 fd6d 	bl	8001360 <HAL_Delay>
	    HAL_UART_Transmit(&huart4, cameraBuffer+NEXT_ADDRESS, CAMERA_FRAME_BUFFER_SIZE, HAL_MAX_DELAY);
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f501 4116 	add.w	r1, r1, #38400	; 0x9600
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000896:	481d      	ldr	r0, [pc, #116]	; (800090c <main+0x1f0>)
 8000898:	f004 fc09 	bl	80050ae <HAL_UART_Transmit>
	    HAL_Delay(5);
 800089c:	2005      	movs	r0, #5
 800089e:	f000 fd5f 	bl	8001360 <HAL_Delay>
	    HAL_UART_Transmit(&huart4, cameraBuffer+2*NEXT_ADDRESS, CAMERA_FRAME_BUFFER_SIZE, HAL_MAX_DELAY);
 80008a2:	f107 0108 	add.w	r1, r7, #8
 80008a6:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <main+0x1f0>)
 80008b4:	f004 fbfb 	bl	80050ae <HAL_UART_Transmit>
	    HAL_Delay(5);
 80008b8:	2005      	movs	r0, #5
 80008ba:	f000 fd51 	bl	8001360 <HAL_Delay>
	    HAL_UART_Transmit(&huart4, cameraBuffer+3*NEXT_ADDRESS, CAMERA_FRAME_BUFFER_SIZE, HAL_MAX_DELAY);
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	f501 31e1 	add.w	r1, r1, #115200	; 0x1c200
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <main+0x1f0>)
 80008d0:	f004 fbed 	bl	80050ae <HAL_UART_Transmit>
	    HAL_Delay(5);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f000 fd43 	bl	8001360 <HAL_Delay>
	    HAL_UART_Transmit(&huart4,(uint8_t *) &stop_bit, 2, 20);
 80008da:	f107 0108 	add.w	r1, r7, #8
 80008de:	3904      	subs	r1, #4
 80008e0:	2314      	movs	r3, #20
 80008e2:	2202      	movs	r2, #2
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <main+0x1f0>)
 80008e6:	f004 fbe2 	bl	80050ae <HAL_UART_Transmit>
	    HAL_Delay(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fd38 	bl	8001360 <HAL_Delay>
  {
 80008f0:	e784      	b.n	80007fc <main+0xe0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	f507 3716 	add.w	r7, r7, #153600	; 0x25800
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020c00 	.word	0x40020c00
 8000904:	2000012c 	.word	0x2000012c
 8000908:	08006b00 	.word	0x08006b00
 800090c:	20000180 	.word	0x20000180
 8000910:	08006b28 	.word	0x08006b28
 8000914:	08006b50 	.word	0x08006b50
 8000918:	2000008c 	.word	0x2000008c
 800091c:	08006b7c 	.word	0x08006b7c

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fbae 	bl	8006090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <SystemClock_Config+0xdc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <SystemClock_Config+0xdc>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <SystemClock_Config+0xdc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <SystemClock_Config+0xe0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800096c:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <SystemClock_Config+0xe0>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xe0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	2310      	movs	r3, #16
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000994:	2308      	movs	r3, #8
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000998:	2378      	movs	r3, #120	; 0x78
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fe73 	bl	8004694 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b4:	f000 f98c 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2103      	movs	r1, #3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f8d4 	bl	8004b84 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009e2:	f000 f975 	bl	8000cd0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 80009e6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80009ea:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80009ee:	2000      	movs	r0, #0
 80009f0:	f004 f9ae 	bl	8004d50 <HAL_RCC_MCOConfig>
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <MX_DCMI_Init+0x4c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_DCMI_Init+0x48>)
 8000a3a:	f001 f869 	bl	8001b10 <HAL_DCMI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000a44:	f000 f944 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	50050000 	.word	0x50050000

08000a54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_I2C2_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a92:	f002 fffb 	bl	8003a8c <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 f918 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000aa4:	f003 fd7b 	bl	800459e <HAL_I2CEx_ConfigAnalogFilter>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 f90f 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000ab6:	f003 fdae 	bl	8004616 <HAL_I2CEx_ConfigDigitalFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f906 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	000186a0 	.word	0x000186a0

08000ad4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_UART4_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_UART4_Init+0x4c>)
 8000b0c:	f004 fa82 	bl	8005014 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 f8db 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000180 	.word	0x20000180
 8000b24:	40004c00 	.word	0x40004c00

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_DMA_Init+0x68>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 fcf7 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b70:	200f      	movs	r0, #15
 8000b72:	f000 fd10 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2039      	movs	r0, #57	; 0x39
 8000b7c:	f000 fcef 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b80:	2039      	movs	r0, #57	; 0x39
 8000b82:	f000 fd08 	bl	8001596 <HAL_NVIC_EnableIRQ>

}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a2f      	ldr	r2, [pc, #188]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DCMI_RST_Pin|DCMI_PWD_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <MX_GPIO_Init+0x134>)
 8000c76:	f002 feef 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWD_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWD_Pin;
 8000c7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_GPIO_Init+0x134>)
 8000c94:	f002 fd34 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x138>)
 8000cb6:	f002 fd23 	bl	8003700 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a77      	ldr	r2, [pc, #476]	; (8000f28 <HAL_DCMI_MspInit+0x1fc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f040 80e8 	bne.w	8000f20 <HAL_DCMI_MspInit+0x1f4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	4b75      	ldr	r3, [pc, #468]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d58:	4a74      	ldr	r2, [pc, #464]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d60:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
 8000d6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	4b6e      	ldr	r3, [pc, #440]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a6d      	ldr	r2, [pc, #436]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	4b67      	ldr	r3, [pc, #412]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a66      	ldr	r2, [pc, #408]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b64      	ldr	r3, [pc, #400]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	4b60      	ldr	r3, [pc, #384]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a5f      	ldr	r2, [pc, #380]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	4b59      	ldr	r3, [pc, #356]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_DCMI_MspInit+0x200>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PG11     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000df8:	2370      	movs	r3, #112	; 0x70
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e08:	230d      	movs	r3, #13
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4847      	ldr	r0, [pc, #284]	; (8000f30 <HAL_DCMI_MspInit+0x204>)
 8000e14:	f002 fc74 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e18:	2350      	movs	r3, #80	; 0x50
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e28:	230d      	movs	r3, #13
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4840      	ldr	r0, [pc, #256]	; (8000f34 <HAL_DCMI_MspInit+0x208>)
 8000e34:	f002 fc64 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e38:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e4a:	230d      	movs	r3, #13
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4838      	ldr	r0, [pc, #224]	; (8000f38 <HAL_DCMI_MspInit+0x20c>)
 8000e56:	f002 fc53 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e6a:	230d      	movs	r3, #13
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <HAL_DCMI_MspInit+0x210>)
 8000e76:	f002 fc43 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000e7a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e8c:	230d      	movs	r3, #13
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	482a      	ldr	r0, [pc, #168]	; (8000f40 <HAL_DCMI_MspInit+0x214>)
 8000e98:	f002 fc32 	bl	8003700 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000e9e:	4a2a      	ldr	r2, [pc, #168]	; (8000f48 <HAL_DCMI_MspInit+0x21c>)
 8000ea0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ed6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eda:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ede:	2204      	movs	r2, #4
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000ef6:	f000 fe79 	bl	8001bec <HAL_DMA_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_DCMI_MspInit+0x1d8>
    {
      Error_Handler();
 8000f00:	f7ff fee6 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_DCMI_MspInit+0x218>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	204e      	movs	r0, #78	; 0x4e
 8000f16:	f000 fb22 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f1a:	204e      	movs	r0, #78	; 0x4e
 8000f1c:	f000 fb3b 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	50050000 	.word	0x50050000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40021800 	.word	0x40021800
 8000f44:	200000cc 	.word	0x200000cc
 8000f48:	40026428 	.word	0x40026428

08000f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_I2C_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12b      	bne.n	8000fc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8e:	2312      	movs	r3, #18
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_I2C_MspInit+0x8c>)
 8000fa6:	f002 fbab 	bl	8003700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_I2C_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40005800 	.word	0x40005800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021400 	.word	0x40021400

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_UART_MspInit+0x104>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d16b      	bne.n	80010d6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_UART_MspInit+0x108>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <HAL_UART_MspInit+0x108>)
 8001008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_UART_MspInit+0x108>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_UART_MspInit+0x108>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a30      	ldr	r2, [pc, #192]	; (80010e4 <HAL_UART_MspInit+0x108>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_UART_MspInit+0x108>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001036:	2303      	movs	r3, #3
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001046:	2308      	movs	r3, #8
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <HAL_UART_MspInit+0x10c>)
 8001052:	f002 fb55 	bl	8003700 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <HAL_UART_MspInit+0x114>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_UART_MspInit+0x110>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_UART_MspInit+0x110>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_UART_MspInit+0x110>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_UART_MspInit+0x110>)
 800108c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001090:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UART_MspInit+0x110>)
 8001094:	2204      	movs	r2, #4
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_UART_MspInit+0x110>)
 800109a:	2203      	movs	r2, #3
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_UART_MspInit+0x110>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_UART_MspInit+0x110>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <HAL_UART_MspInit+0x110>)
 80010ac:	f000 fd9e 	bl	8001bec <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80010b6:	f7ff fe0b 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_UART_MspInit+0x110>)
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_UART_MspInit+0x110>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2034      	movs	r0, #52	; 0x34
 80010cc:	f000 fa47 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80010d0:	2034      	movs	r0, #52	; 0x34
 80010d2:	f000 fa60 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004c00 	.word	0x40004c00
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	200001c4 	.word	0x200001c4
 80010f0:	40026070 	.word	0x40026070

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f8ee 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DMA1_Stream4_IRQHandler+0x10>)
 800114e:	f000 fee5 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001c4 	.word	0x200001c4

0800115c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <UART4_IRQHandler+0x10>)
 8001162:	f004 f837 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000180 	.word	0x20000180

08001170 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA2_Stream1_IRQHandler+0x10>)
 8001176:	f000 fed1 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000cc 	.word	0x200000cc

08001184 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DCMI_IRQHandler+0x10>)
 800118a:	f000 fb6f 	bl	800186c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000008c 	.word	0x2000008c

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f004 ff38 	bl	800603c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20030000 	.word	0x20030000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000224 	.word	0x20000224
 8001200:	20000240 	.word	0x20000240

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd7 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f004 fef7 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fa5f 	bl	800071c <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001260:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800126c:	08006c54 	.word	0x08006c54
  ldr r2, =_sbss
 8001270:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001274:	2000023c 	.word	0x2000023c

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f94f 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fd14 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f967 	bl	80015b2 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f92f 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000228 	.word	0x20000228

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000228 	.word	0x20000228

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_DCMI_Start_DMA+0x20>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e086      	b.n	80016fa <HAL_DCMI_Start_DMA+0x12e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2202      	movs	r2, #2
 80015f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800160a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0202 	bic.w	r2, r2, #2
 800161a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	4a34      	ldr	r2, [pc, #208]	; (8001704 <HAL_DCMI_Start_DMA+0x138>)
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <HAL_DCMI_Start_DMA+0x13c>)
 800163a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	2200      	movs	r2, #0
 8001642:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d20a      	bcs.n	800166e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3328      	adds	r3, #40	; 0x28
 8001662:	4619      	mov	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	f000 fb6e 	bl	8001d48 <HAL_DMA_Start_IT>
 800166c:	e038      	b.n	80016e0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_DCMI_Start_DMA+0x138>)
 8001674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001688:	e009      	b.n	800169e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	085a      	lsrs	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	005a      	lsls	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d2f0      	bcs.n	800168a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	1e9a      	subs	r2, r3, #2
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3328      	adds	r3, #40	; 0x28
 80016d0:	4619      	mov	r1, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	f000 fe88 	bl	80023f0 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	080019b9 	.word	0x080019b9
 8001708:	08001ae3 	.word	0x08001ae3

0800170c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_DCMI_Stop+0xb0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <HAL_DCMI_Stop+0xb4>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_DCMI_Stop+0x2a>
 8001732:	2302      	movs	r3, #2
 8001734:	e03e      	b.n	80017b4 <HAL_DCMI_Stop+0xa8>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	60ba      	str	r2, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d108      	bne.n	8001772 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	73fb      	strb	r3, [r7, #15]
      break;
 8001770:	e006      	b.n	8001780 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ea      	bne.n	8001756 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800178e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fb2f 	bl	8001df8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	92492493 	.word	0x92492493

080017c4 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_DCMI_Suspend+0xa0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_DCMI_Suspend+0xa4>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_DCMI_Suspend+0x2a>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e033      	b.n	8001856 <HAL_DCMI_Suspend+0x92>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d124      	bne.n	800184c <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2205      	movs	r2, #5
 8001806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	60ba      	str	r2, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_DCMI_Suspend+0x7a>
      {        
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
        
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        
        status = HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	73fb      	strb	r3, [r7, #15]
        break;
 800183c:	e006      	b.n	800184c <HAL_DCMI_Suspend+0x88>
      }
    }
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e6      	bne.n	800181a <HAL_DCMI_Suspend+0x56>
  }    
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000
 8001868:	92492493 	.word	0x92492493

0800186c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2204      	movs	r2, #4
 800188c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	f043 0202 	orr.w	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_DCMI_IRQHandler+0xf8>)
 80018a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fb12 	bl	8001ed8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2202      	movs	r2, #2
 80018c4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2204      	movs	r2, #4
 80018d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	4a21      	ldr	r2, [pc, #132]	; (8001964 <HAL_DCMI_IRQHandler+0xf8>)
 80018e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 faf6 	bl	8001ed8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f83c 	bl	800197c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f83a 	bl	8001990 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d107      	bne.n	8001944 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 021e 	bic.w	r2, r2, #30
 8001942:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f825 	bl	80019a4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	08001ae3 	.word	0x08001ae3

08001968 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d043      	beq.n	8001a5a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019de:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d118      	bne.n	8001a1e <DCMI_DMAXferCplt+0x66>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	00da      	lsls	r2, r3, #3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f001 fe37 	bl	8003680 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a1c:	e044      	b.n	8001aa8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d13c      	bne.n	8001aa8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	00da      	lsls	r2, r3, #3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	2201      	movs	r2, #1
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f001 fe19 	bl	8003680 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
 8001a58:	e026      	b.n	8001aa8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	e017      	b.n	8001aa8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10f      	bne.n	8001aa8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	440a      	add	r2, r1
 8001a9e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d112      	bne.n	8001ada <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d103      	bne.n	8001ada <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff ff30 	bl	8001968 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e05f      	b.n	8001be2 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff f8f8 	bl	8000d2c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff f8f5 	bl	8000d2c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b58:	f023 0308 	bic.w	r3, r3, #8
 8001b5c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b72:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b7e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b8a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d112      	bne.n	8001bc2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7f1b      	ldrb	r3, [r3, #28]
 8001ba0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7f5b      	ldrb	r3, [r3, #29]
 8001ba6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ba8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7f9b      	ldrb	r3, [r3, #30]
 8001bae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7fdb      	ldrb	r3, [r3, #31]
 8001bb8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001bbe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001bc0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 021e 	orr.w	r2, r2, #30
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff fba6 	bl	8001348 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e099      	b.n	8001d3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	e00f      	b.n	8001c4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2a:	f7ff fb8d 	bl	8001348 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d908      	bls.n	8001c4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e078      	b.n	8001d3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e8      	bne.n	8001c2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_DMA_Init+0x158>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d107      	bne.n	8001cb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4313      	orrs	r3, r2
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d117      	bne.n	8001d0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fb01 	bl	80022f8 <DMA_CheckFifoParam>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e016      	b.n	8001d3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fab8 	bl	800228c <DMA_CalcBaseAndBitshift>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	223f      	movs	r2, #63	; 0x3f
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	f010803f 	.word	0xf010803f

08001d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Start_IT+0x26>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e040      	b.n	8001df0 <HAL_DMA_Start_IT+0xa8>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d12f      	bne.n	8001de2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fa4a 	bl	8002230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	223f      	movs	r2, #63	; 0x3f
 8001da2:	409a      	lsls	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0216 	orr.w	r2, r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0208 	orr.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e005      	b.n	8001dee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e06:	f7ff fa9f 	bl	8001348 <HAL_GetTick>
 8001e0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e052      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0216 	bic.w	r2, r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_DMA_Abort+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7a:	e013      	b.n	8001ea4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7c:	f7ff fa64 	bl	8001348 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d90c      	bls.n	8001ea4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e015      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e4      	bne.n	8001e7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	223f      	movs	r2, #63	; 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d004      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00c      	b.n	8001f10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f28:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_DMA_IRQHandler+0x248>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a8e      	ldr	r2, [pc, #568]	; (8002168 <HAL_DMA_IRQHandler+0x24c>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	2208      	movs	r2, #8
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2208      	movs	r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d043      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03c      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2210      	movs	r2, #16
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d024      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
 800204a:	e01f      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e016      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0208 	bic.w	r2, r2, #8
 800207a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	2220      	movs	r2, #32
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808f 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8087 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2220      	movs	r2, #32
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d136      	bne.n	8002134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x1da>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	223f      	movs	r2, #63	; 0x3f
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d07e      	beq.n	8002228 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
        }
        return;
 8002132:	e079      	b.n	8002228 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01d      	beq.n	800217e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	2b00      	cmp	r3, #0
 8002156:	d031      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e02c      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e01e      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10f      	bne.n	80021ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2205      	movs	r2, #5
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d307      	bcc.n	8002204 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f2      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x2cc>
 8002202:	e000      	b.n	8002206 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002204:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002228:	bf00      	nop
    }
  }
}
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800224c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d108      	bne.n	8002270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226e:	e007      	b.n	8002280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b10      	subs	r3, #16
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <DMA_CalcBaseAndBitshift+0x64>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <DMA_CalcBaseAndBitshift+0x68>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d909      	bls.n	80022ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
 80022cc:	e007      	b.n	80022de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	aaaaaaab 	.word	0xaaaaaaab
 80022f4:	08006c08 	.word	0x08006c08

080022f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d856      	bhi.n	80023c6 <DMA_CheckFifoParam+0xce>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x28>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002343 	.word	0x08002343
 8002328:	08002331 	.word	0x08002331
 800232c:	080023c7 	.word	0x080023c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d046      	beq.n	80023ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002340:	e043      	b.n	80023ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800234a:	d140      	bne.n	80023ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e03d      	b.n	80023ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235a:	d121      	bne.n	80023a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d837      	bhi.n	80023d2 <DMA_CheckFifoParam+0xda>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <DMA_CheckFifoParam+0x70>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	0800237f 	.word	0x0800237f
 8002370:	08002379 	.word	0x08002379
 8002374:	08002391 	.word	0x08002391
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      break;
 800237c:	e030      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238e:	e022      	b.n	80023d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002398:	d11f      	bne.n	80023da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239e:	e01c      	b.n	80023da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d903      	bls.n	80023ae <DMA_CheckFifoParam+0xb6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ac:	e018      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      break;
 80023b2:	e015      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e00b      	b.n	80023de <DMA_CheckFifoParam+0xe6>
      break;
 80023c6:	bf00      	nop
 80023c8:	e00a      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e008      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e006      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e004      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
    }
  } 
  
  return status; 
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d106      	bne.n	8002418 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f001 b911 	b.w	800363a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f001 b8ff 	b.w	800363a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002446:	2302      	movs	r3, #2
 8002448:	f001 b8f7 	b.w	800363a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	f041 80e5 	bne.w	800362c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f001 f910 	bl	80036b4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b8d      	ldr	r3, [pc, #564]	; (80026d0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800249c:	429a      	cmp	r2, r3
 800249e:	d960      	bls.n	8002562 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a8b      	ldr	r2, [pc, #556]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d057      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d050      	beq.n	8002556 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a88      	ldr	r2, [pc, #544]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d049      	beq.n	8002552 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d042      	beq.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a85      	ldr	r2, [pc, #532]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d03a      	beq.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a84      	ldr	r2, [pc, #528]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d032      	beq.n	8002542 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a82      	ldr	r2, [pc, #520]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02a      	beq.n	800253c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a81      	ldr	r2, [pc, #516]	; (80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7f      	ldr	r2, [pc, #508]	; (80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01a      	beq.n	8002530 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d012      	beq.n	800252a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00a      	beq.n	8002524 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d102      	bne.n	800251e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002518:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800251c:	e01e      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800251e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002522:	e01b      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002524:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002528:	e018      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800252a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800252e:	e015      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002534:	e012      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800253a:	e00f      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800253c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002540:	e00c      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002546:	e009      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800254c:	e006      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800254e:	2320      	movs	r3, #32
 8002550:	e004      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002552:	2320      	movs	r3, #32
 8002554:	e002      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002556:	2320      	movs	r3, #32
 8002558:	e000      	b.n	800255c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800255a:	2320      	movs	r3, #32
 800255c:	4a69      	ldr	r2, [pc, #420]	; (8002704 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800255e:	60d3      	str	r3, [r2, #12]
 8002560:	e14f      	b.n	8002802 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800256a:	429a      	cmp	r2, r3
 800256c:	d960      	bls.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d057      	beq.n	8002628 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a56      	ldr	r2, [pc, #344]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d050      	beq.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a55      	ldr	r2, [pc, #340]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d049      	beq.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d042      	beq.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03a      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d032      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4f      	ldr	r2, [pc, #316]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d02a      	beq.n	800260a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01a      	beq.n	80025fe <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d012      	beq.n	80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a49      	ldr	r2, [pc, #292]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00a      	beq.n	80025f2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d102      	bne.n	80025ec <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80025e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ea:	e01e      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025f0:	e01b      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f6:	e018      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025fc:	e015      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80025fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002602:	e012      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002608:	e00f      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800260a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260e:	e00c      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002614:	e009      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800261a:	e006      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800261c:	2320      	movs	r3, #32
 800261e:	e004      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002620:	2320      	movs	r3, #32
 8002622:	e002      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002624:	2320      	movs	r3, #32
 8002626:	e000      	b.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002628:	2320      	movs	r3, #32
 800262a:	4a36      	ldr	r2, [pc, #216]	; (8002704 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800262c:	6093      	str	r3, [r2, #8]
 800262e:	e0e8      	b.n	8002802 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002638:	429a      	cmp	r2, r3
 800263a:	f240 8082 	bls.w	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d078      	beq.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d071      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d06a      	beq.n	8002732 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d063      	beq.n	800272e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d05b      	beq.n	8002728 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d053      	beq.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04b      	beq.n	800271c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d043      	beq.n	8002716 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d012      	beq.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00a      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d102      	bne.n	80026bc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80026b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ba:	e03f      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026c0:	e03c      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026c6:	e039      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026cc:	e036      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026ce:	bf00      	nop
 80026d0:	40026458 	.word	0x40026458
 80026d4:	40026010 	.word	0x40026010
 80026d8:	40026410 	.word	0x40026410
 80026dc:	40026070 	.word	0x40026070
 80026e0:	40026470 	.word	0x40026470
 80026e4:	40026028 	.word	0x40026028
 80026e8:	40026428 	.word	0x40026428
 80026ec:	40026088 	.word	0x40026088
 80026f0:	40026488 	.word	0x40026488
 80026f4:	40026040 	.word	0x40026040
 80026f8:	40026440 	.word	0x40026440
 80026fc:	400260a0 	.word	0x400260a0
 8002700:	400264a0 	.word	0x400264a0
 8002704:	40026400 	.word	0x40026400
 8002708:	400260b8 	.word	0x400260b8
 800270c:	40026058 	.word	0x40026058
 8002710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002714:	e012      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271a:	e00f      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800271c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002720:	e00c      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002726:	e009      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800272c:	e006      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800272e:	2320      	movs	r3, #32
 8002730:	e004      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002732:	2320      	movs	r3, #32
 8002734:	e002      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002736:	2320      	movs	r3, #32
 8002738:	e000      	b.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800273a:	2320      	movs	r3, #32
 800273c:	4a8c      	ldr	r2, [pc, #560]	; (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	e05f      	b.n	8002802 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a8b      	ldr	r2, [pc, #556]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d057      	beq.n	80027fc <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a89      	ldr	r2, [pc, #548]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d050      	beq.n	80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a88      	ldr	r2, [pc, #544]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d049      	beq.n	80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a86      	ldr	r2, [pc, #536]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d042      	beq.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a85      	ldr	r2, [pc, #532]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03a      	beq.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a83      	ldr	r2, [pc, #524]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d032      	beq.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a82      	ldr	r2, [pc, #520]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d02a      	beq.n	80027de <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7f      	ldr	r2, [pc, #508]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d01a      	beq.n	80027d2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a7d      	ldr	r2, [pc, #500]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d012      	beq.n	80027cc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7c      	ldr	r2, [pc, #496]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00a      	beq.n	80027c6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d102      	bne.n	80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80027ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027be:	e01e      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027c4:	e01b      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027ca:	e018      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d0:	e015      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d6:	e012      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027dc:	e00f      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e2:	e00c      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	e009      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ee:	e006      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027f0:	2320      	movs	r3, #32
 80027f2:	e004      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027f4:	2320      	movs	r3, #32
 80027f6:	e002      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027f8:	2320      	movs	r3, #32
 80027fa:	e000      	b.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80027fc:	2320      	movs	r3, #32
 80027fe:	4a5c      	ldr	r2, [pc, #368]	; (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002800:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800280a:	429a      	cmp	r2, r3
 800280c:	d960      	bls.n	80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d057      	beq.n	80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a56      	ldr	r2, [pc, #344]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d050      	beq.n	80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a55      	ldr	r2, [pc, #340]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d049      	beq.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d042      	beq.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d03a      	beq.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d032      	beq.n	80028b0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4f      	ldr	r2, [pc, #316]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02a      	beq.n	80028aa <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4c      	ldr	r2, [pc, #304]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01a      	beq.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a4a      	ldr	r2, [pc, #296]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d012      	beq.n	8002898 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00a      	beq.n	8002892 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d102      	bne.n	800288c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002886:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800288a:	e01e      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800288c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002890:	e01b      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002896:	e018      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800289c:	e015      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800289e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028a2:	e012      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a8:	e00f      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ae:	e00c      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b4:	e009      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ba:	e006      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028bc:	2310      	movs	r3, #16
 80028be:	e004      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028c0:	2310      	movs	r3, #16
 80028c2:	e002      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028c4:	2310      	movs	r3, #16
 80028c6:	e000      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028c8:	2310      	movs	r3, #16
 80028ca:	4a37      	ldr	r2, [pc, #220]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80028cc:	60d3      	str	r3, [r2, #12]
 80028ce:	e14f      	b.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b35      	ldr	r3, [pc, #212]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	f240 8082 	bls.w	80029e2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d078      	beq.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d071      	beq.n	80029d6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d06a      	beq.n	80029d2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d063      	beq.n	80029ce <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d05b      	beq.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d053      	beq.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04b      	beq.n	80029bc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d043      	beq.n	80029b6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d03b      	beq.n	80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d012      	beq.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00a      	beq.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d102      	bne.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002956:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800295a:	e03f      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800295c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002960:	e03c      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002966:	e039      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800296c:	e036      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800296e:	bf00      	nop
 8002970:	40026000 	.word	0x40026000
 8002974:	40026010 	.word	0x40026010
 8002978:	40026410 	.word	0x40026410
 800297c:	40026070 	.word	0x40026070
 8002980:	40026470 	.word	0x40026470
 8002984:	40026028 	.word	0x40026028
 8002988:	40026428 	.word	0x40026428
 800298c:	40026088 	.word	0x40026088
 8002990:	40026488 	.word	0x40026488
 8002994:	40026040 	.word	0x40026040
 8002998:	40026440 	.word	0x40026440
 800299c:	400260a0 	.word	0x400260a0
 80029a0:	400264a0 	.word	0x400264a0
 80029a4:	40026458 	.word	0x40026458
 80029a8:	40026400 	.word	0x40026400
 80029ac:	400260b8 	.word	0x400260b8
 80029b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029b4:	e012      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ba:	e00f      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c0:	e00c      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c6:	e009      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029cc:	e006      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029ce:	2310      	movs	r3, #16
 80029d0:	e004      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029d2:	2310      	movs	r3, #16
 80029d4:	e002      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029d6:	2310      	movs	r3, #16
 80029d8:	e000      	b.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029da:	2310      	movs	r3, #16
 80029dc:	4a8c      	ldr	r2, [pc, #560]	; (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80029de:	6093      	str	r3, [r2, #8]
 80029e0:	e0c6      	b.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b8a      	ldr	r3, [pc, #552]	; (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d960      	bls.n	8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a89      	ldr	r2, [pc, #548]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d057      	beq.n	8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a87      	ldr	r2, [pc, #540]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d050      	beq.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a86      	ldr	r2, [pc, #536]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d049      	beq.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a84      	ldr	r2, [pc, #528]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d042      	beq.n	8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a83      	ldr	r2, [pc, #524]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d03a      	beq.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d032      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a80      	ldr	r2, [pc, #512]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02a      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7e      	ldr	r2, [pc, #504]	; (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d022      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7d      	ldr	r2, [pc, #500]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d01a      	beq.n	8002a7e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a7b      	ldr	r2, [pc, #492]	; (8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d012      	beq.n	8002a78 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00a      	beq.n	8002a72 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a78      	ldr	r2, [pc, #480]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d102      	bne.n	8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002a66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a6a:	e01e      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a70:	e01b      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a76:	e018      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a7c:	e015      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a82:	e012      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	e00f      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8e:	e00c      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a94:	e009      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9a:	e006      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	e004      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	e002      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	e000      	b.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002aac:	60d3      	str	r3, [r2, #12]
 8002aae:	e05f      	b.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d057      	beq.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a57      	ldr	r2, [pc, #348]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d050      	beq.n	8002b66 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d049      	beq.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d042      	beq.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a52      	ldr	r2, [pc, #328]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03a      	beq.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d032      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d02a      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4b      	ldr	r2, [pc, #300]	; (8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d012      	beq.n	8002b3a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00a      	beq.n	8002b34 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a48      	ldr	r2, [pc, #288]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002b28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b2c:	e01e      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b32:	e01b      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b38:	e018      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b3e:	e015      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b44:	e012      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4a:	e00f      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b50:	e00c      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b56:	e009      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	e006      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b5e:	2310      	movs	r3, #16
 8002b60:	e004      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b62:	2310      	movs	r3, #16
 8002b64:	e002      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b66:	2310      	movs	r3, #16
 8002b68:	e000      	b.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002b6e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f240 8082 	bls.w	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d078      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d071      	beq.n	8002c76 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d06a      	beq.n	8002c72 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d063      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d05b      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d053      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04b      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d043      	beq.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d012      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00a      	beq.n	8002c02 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002bf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bfa:	e03f      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c00:	e03c      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c06:	e039      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c0c:	e036      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c0e:	bf00      	nop
 8002c10:	40026400 	.word	0x40026400
 8002c14:	40026058 	.word	0x40026058
 8002c18:	40026010 	.word	0x40026010
 8002c1c:	40026410 	.word	0x40026410
 8002c20:	40026070 	.word	0x40026070
 8002c24:	40026470 	.word	0x40026470
 8002c28:	40026028 	.word	0x40026028
 8002c2c:	40026428 	.word	0x40026428
 8002c30:	40026088 	.word	0x40026088
 8002c34:	40026488 	.word	0x40026488
 8002c38:	40026040 	.word	0x40026040
 8002c3c:	40026440 	.word	0x40026440
 8002c40:	400260a0 	.word	0x400260a0
 8002c44:	400264a0 	.word	0x400264a0
 8002c48:	40026000 	.word	0x40026000
 8002c4c:	40026458 	.word	0x40026458
 8002c50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c54:	e012      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c5a:	e00f      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c60:	e00c      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c66:	e009      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6c:	e006      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e004      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c72:	2308      	movs	r3, #8
 8002c74:	e002      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e000      	b.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	4a8c      	ldr	r2, [pc, #560]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002c7e:	60d3      	str	r3, [r2, #12]
 8002c80:	e14e      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b8a      	ldr	r3, [pc, #552]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d960      	bls.n	8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a89      	ldr	r2, [pc, #548]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d057      	beq.n	8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a87      	ldr	r2, [pc, #540]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d050      	beq.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a86      	ldr	r2, [pc, #536]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d049      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a84      	ldr	r2, [pc, #528]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d042      	beq.n	8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a83      	ldr	r2, [pc, #524]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d03a      	beq.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a81      	ldr	r2, [pc, #516]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d032      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02a      	beq.n	8002d2a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7e      	ldr	r2, [pc, #504]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7d      	ldr	r2, [pc, #500]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d01a      	beq.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a7b      	ldr	r2, [pc, #492]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d012      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7a      	ldr	r2, [pc, #488]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00a      	beq.n	8002d12 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a78      	ldr	r2, [pc, #480]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d102      	bne.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002d06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d0a:	e01e      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d10:	e01b      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d16:	e018      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d1c:	e015      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d22:	e012      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	e00f      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2e:	e00c      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	e009      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3a:	e006      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	e004      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d40:	2308      	movs	r3, #8
 8002d42:	e002      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d44:	2308      	movs	r3, #8
 8002d46:	e000      	b.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d48:	2308      	movs	r3, #8
 8002d4a:	4a59      	ldr	r2, [pc, #356]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002d4c:	6093      	str	r3, [r2, #8]
 8002d4e:	e0e7      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d960      	bls.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a55      	ldr	r2, [pc, #340]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d057      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d050      	beq.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d049      	beq.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d042      	beq.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d03a      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d032      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a4c      	ldr	r2, [pc, #304]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02a      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d022      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a49      	ldr	r2, [pc, #292]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01a      	beq.n	8002dec <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a48      	ldr	r2, [pc, #288]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a46      	ldr	r2, [pc, #280]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00a      	beq.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a45      	ldr	r2, [pc, #276]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002dd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dd8:	e01e      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dde:	e01b      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002de0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002de4:	e018      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002de6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dea:	e015      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002df0:	e012      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df6:	e00f      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfc:	e00c      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e02:	e009      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e08:	e006      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	e004      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	e002      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e12:	2308      	movs	r3, #8
 8002e14:	e000      	b.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e16:	2308      	movs	r3, #8
 8002e18:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002e1a:	60d3      	str	r3, [r2, #12]
 8002e1c:	e080      	b.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a25      	ldr	r2, [pc, #148]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d078      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d071      	beq.n	8002f16 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d06a      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d063      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d05b      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d053      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04b      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d043      	beq.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d012      	beq.n	8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d102      	bne.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002e96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e9a:	e03f      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea0:	e03c      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ea2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ea6:	e039      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eac:	e036      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002eae:	bf00      	nop
 8002eb0:	40026400 	.word	0x40026400
 8002eb4:	400260b8 	.word	0x400260b8
 8002eb8:	40026010 	.word	0x40026010
 8002ebc:	40026410 	.word	0x40026410
 8002ec0:	40026070 	.word	0x40026070
 8002ec4:	40026470 	.word	0x40026470
 8002ec8:	40026028 	.word	0x40026028
 8002ecc:	40026428 	.word	0x40026428
 8002ed0:	40026088 	.word	0x40026088
 8002ed4:	40026488 	.word	0x40026488
 8002ed8:	40026040 	.word	0x40026040
 8002edc:	40026440 	.word	0x40026440
 8002ee0:	400260a0 	.word	0x400260a0
 8002ee4:	400264a0 	.word	0x400264a0
 8002ee8:	40026058 	.word	0x40026058
 8002eec:	40026000 	.word	0x40026000
 8002ef0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ef4:	e012      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efa:	e00f      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	e00c      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f06:	e009      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	e006      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	e004      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e002      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f16:	2308      	movs	r3, #8
 8002f18:	e000      	b.n	8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	4a8a      	ldr	r2, [pc, #552]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002f1e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b89      	ldr	r3, [pc, #548]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d960      	bls.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a87      	ldr	r2, [pc, #540]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d057      	beq.n	8002fe6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a86      	ldr	r2, [pc, #536]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d050      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a84      	ldr	r2, [pc, #528]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d049      	beq.n	8002fde <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a83      	ldr	r2, [pc, #524]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d042      	beq.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a81      	ldr	r2, [pc, #516]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d03a      	beq.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d032      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7e      	ldr	r2, [pc, #504]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02a      	beq.n	8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7b      	ldr	r2, [pc, #492]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01a      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a78      	ldr	r2, [pc, #480]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00a      	beq.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d102      	bne.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa8:	e01e      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fae:	e01b      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fb4:	e018      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fba:	e015      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fc0:	e012      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc6:	e00f      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fcc:	e00c      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd2:	e009      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd8:	e006      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e004      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	e002      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e000      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002fea:	60d3      	str	r3, [r2, #12]
 8002fec:	e150      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d960      	bls.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d057      	beq.n	80030b4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a52      	ldr	r2, [pc, #328]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d050      	beq.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a51      	ldr	r2, [pc, #324]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d049      	beq.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4f      	ldr	r2, [pc, #316]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d042      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4e      	ldr	r2, [pc, #312]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d03a      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d032      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a4b      	ldr	r2, [pc, #300]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02a      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a49      	ldr	r2, [pc, #292]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a48      	ldr	r2, [pc, #288]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01a      	beq.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a46      	ldr	r2, [pc, #280]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d012      	beq.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a45      	ldr	r2, [pc, #276]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00a      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d102      	bne.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003072:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003076:	e01e      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307c:	e01b      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800307e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003082:	e018      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003084:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003088:	e015      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800308a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800308e:	e012      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003094:	e00f      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309a:	e00c      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800309c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a0:	e009      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	e006      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030a8:	2304      	movs	r3, #4
 80030aa:	e004      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030ac:	2304      	movs	r3, #4
 80030ae:	e002      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e000      	b.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030b4:	2304      	movs	r3, #4
 80030b6:	4a32      	ldr	r2, [pc, #200]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	e0e9      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f240 8083 	bls.w	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a20      	ldr	r2, [pc, #128]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d079      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d072      	beq.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d06b      	beq.n	80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d064      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d05c      	beq.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d054      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d04c      	beq.n	80031aa <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d044      	beq.n	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d03c      	beq.n	800319e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d034      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d02c      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d124      	bne.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003142:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003146:	e040      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003148:	40026000 	.word	0x40026000
 800314c:	40026458 	.word	0x40026458
 8003150:	40026010 	.word	0x40026010
 8003154:	40026410 	.word	0x40026410
 8003158:	40026070 	.word	0x40026070
 800315c:	40026470 	.word	0x40026470
 8003160:	40026028 	.word	0x40026028
 8003164:	40026428 	.word	0x40026428
 8003168:	40026088 	.word	0x40026088
 800316c:	40026488 	.word	0x40026488
 8003170:	40026040 	.word	0x40026040
 8003174:	40026440 	.word	0x40026440
 8003178:	400260a0 	.word	0x400260a0
 800317c:	400264a0 	.word	0x400264a0
 8003180:	40026400 	.word	0x40026400
 8003184:	400260b8 	.word	0x400260b8
 8003188:	40026058 	.word	0x40026058
 800318c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003190:	e01b      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003192:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003196:	e018      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003198:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800319c:	e015      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800319e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031a2:	e012      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a8:	e00f      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ae:	e00c      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	e009      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ba:	e006      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031bc:	2304      	movs	r3, #4
 80031be:	e004      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e002      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e000      	b.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031c8:	2304      	movs	r3, #4
 80031ca:	4a8b      	ldr	r2, [pc, #556]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80031cc:	60d3      	str	r3, [r2, #12]
 80031ce:	e05f      	b.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a89      	ldr	r2, [pc, #548]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d057      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a88      	ldr	r2, [pc, #544]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d050      	beq.n	8003286 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a86      	ldr	r2, [pc, #536]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d049      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a85      	ldr	r2, [pc, #532]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d042      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a83      	ldr	r2, [pc, #524]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03a      	beq.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a82      	ldr	r2, [pc, #520]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d032      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a80      	ldr	r2, [pc, #512]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02a      	beq.n	800326c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7f      	ldr	r2, [pc, #508]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7d      	ldr	r2, [pc, #500]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01a      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7c      	ldr	r2, [pc, #496]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d012      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7a      	ldr	r2, [pc, #488]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00a      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a79      	ldr	r2, [pc, #484]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800324c:	e01e      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800324e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003252:	e01b      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003258:	e018      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800325a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800325e:	e015      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003260:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003264:	e012      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326a:	e00f      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800326c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003270:	e00c      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	e009      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327c:	e006      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800327e:	2304      	movs	r3, #4
 8003280:	e004      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003282:	2304      	movs	r3, #4
 8003284:	e002      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003286:	2304      	movs	r3, #4
 8003288:	e000      	b.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800328a:	2304      	movs	r3, #4
 800328c:	4a5a      	ldr	r2, [pc, #360]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800328e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003298:	429a      	cmp	r2, r3
 800329a:	d95c      	bls.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a56      	ldr	r2, [pc, #344]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d053      	beq.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04c      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a53      	ldr	r2, [pc, #332]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03e      	beq.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a50      	ldr	r2, [pc, #320]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d037      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4f      	ldr	r2, [pc, #316]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d030      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d029      	beq.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4a      	ldr	r2, [pc, #296]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01a      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a49      	ldr	r2, [pc, #292]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d012      	beq.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a47      	ldr	r2, [pc, #284]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00a      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d102      	bne.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	e01a      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800331a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800331e:	e017      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003324:	e014      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332a:	e011      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800332c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003330:	e00e      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	e00c      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	e00a      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800333a:	2340      	movs	r3, #64	; 0x40
 800333c:	e008      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	e006      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003342:	2301      	movs	r3, #1
 8003344:	e004      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003346:	2301      	movs	r3, #1
 8003348:	e002      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800334e:	2301      	movs	r3, #1
 8003350:	4a37      	ldr	r2, [pc, #220]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003352:	60d3      	str	r3, [r2, #12]
 8003354:	e141      	b.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800335e:	429a      	cmp	r2, r3
 8003360:	d97c      	bls.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a25      	ldr	r2, [pc, #148]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d073      	beq.n	8003454 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d06c      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d065      	beq.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d05e      	beq.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d057      	beq.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d050      	beq.n	8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d049      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d042      	beq.n	8003438 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01a      	beq.n	80033f2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d012      	beq.n	80033ec <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00a      	beq.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d102      	bne.n	80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80033da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033de:	e03a      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033e4:	e037      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ea:	e034      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f0:	e031      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f6:	e02e      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80033f8:	40026000 	.word	0x40026000
 80033fc:	40026010 	.word	0x40026010
 8003400:	40026410 	.word	0x40026410
 8003404:	40026070 	.word	0x40026070
 8003408:	40026470 	.word	0x40026470
 800340c:	40026028 	.word	0x40026028
 8003410:	40026428 	.word	0x40026428
 8003414:	40026088 	.word	0x40026088
 8003418:	40026488 	.word	0x40026488
 800341c:	40026040 	.word	0x40026040
 8003420:	40026440 	.word	0x40026440
 8003424:	400260a0 	.word	0x400260a0
 8003428:	400264a0 	.word	0x400264a0
 800342c:	40026458 	.word	0x40026458
 8003430:	40026400 	.word	0x40026400
 8003434:	400260b8 	.word	0x400260b8
 8003438:	2340      	movs	r3, #64	; 0x40
 800343a:	e00c      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800343c:	2340      	movs	r3, #64	; 0x40
 800343e:	e00a      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003440:	2340      	movs	r3, #64	; 0x40
 8003442:	e008      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	e006      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003448:	2301      	movs	r3, #1
 800344a:	e004      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800344c:	2301      	movs	r3, #1
 800344e:	e002      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003454:	2301      	movs	r3, #1
 8003456:	4a7b      	ldr	r2, [pc, #492]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	e0be      	b.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b79      	ldr	r3, [pc, #484]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d95c      	bls.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d053      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04c      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a74      	ldr	r2, [pc, #464]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d045      	beq.n	8003512 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d03e      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d037      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d030      	beq.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d029      	beq.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01a      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d012      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00a      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d102      	bne.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80034e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034e4:	e01a      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ea:	e017      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f0:	e014      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f6:	e011      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fc:	e00e      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	e00c      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003502:	2340      	movs	r3, #64	; 0x40
 8003504:	e00a      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	e008      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	e006      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800350e:	2301      	movs	r3, #1
 8003510:	e004      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003512:	2301      	movs	r3, #1
 8003514:	e002      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800351a:	2301      	movs	r3, #1
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e05b      	b.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d053      	beq.n	80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04c      	beq.n	80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d045      	beq.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a44      	ldr	r2, [pc, #272]	; (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d03e      	beq.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a43      	ldr	r2, [pc, #268]	; (800365c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d037      	beq.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a41      	ldr	r2, [pc, #260]	; (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d030      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a40      	ldr	r2, [pc, #256]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d029      	beq.n	80035bc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3e      	ldr	r2, [pc, #248]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3d      	ldr	r2, [pc, #244]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01a      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d012      	beq.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00a      	beq.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d102      	bne.n	80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800359a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800359e:	e01a      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035a4:	e017      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035aa:	e014      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b0:	e011      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b6:	e00e      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035b8:	2340      	movs	r3, #64	; 0x40
 80035ba:	e00c      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	e00a      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	e008      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035c4:	2340      	movs	r3, #64	; 0x40
 80035c6:	e006      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e004      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e002      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035d4:	2301      	movs	r3, #1
 80035d6:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80035d8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0216 	orr.w	r2, r2, #22
 80035e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0208 	orr.w	r2, r2, #8
 8003618:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e005      	b.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003634:	2302      	movs	r3, #2
 8003636:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003638:	7dfb      	ldrb	r3, [r7, #23]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40026400 	.word	0x40026400
 8003648:	40026058 	.word	0x40026058
 800364c:	40026010 	.word	0x40026010
 8003650:	40026410 	.word	0x40026410
 8003654:	40026070 	.word	0x40026070
 8003658:	40026470 	.word	0x40026470
 800365c:	40026028 	.word	0x40026028
 8003660:	40026428 	.word	0x40026428
 8003664:	40026088 	.word	0x40026088
 8003668:	40026488 	.word	0x40026488
 800366c:	40026040 	.word	0x40026040
 8003670:	40026440 	.word	0x40026440
 8003674:	400260a0 	.word	0x400260a0
 8003678:	400264a0 	.word	0x400264a0
 800367c:	40026000 	.word	0x40026000

08003680 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	e003      	b.n	80036a6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d108      	bne.n	80036e4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036e2:	e007      	b.n	80036f4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e177      	b.n	8003a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	f040 8166 	bne.w	8003a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d005      	beq.n	8003752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	2b02      	cmp	r3, #2
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d017      	beq.n	80037f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d123      	bne.n	8003844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80c0 	beq.w	8003a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_GPIO_Init+0x324>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_GPIO_Init+0x324>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003894:	6453      	str	r3, [r2, #68]	; 0x44
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_GPIO_Init+0x324>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <HAL_GPIO_Init+0x328>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_GPIO_Init+0x32c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d037      	beq.n	800393e <HAL_GPIO_Init+0x23e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a57      	ldr	r2, [pc, #348]	; (8003a30 <HAL_GPIO_Init+0x330>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_GPIO_Init+0x23a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a56      	ldr	r2, [pc, #344]	; (8003a34 <HAL_GPIO_Init+0x334>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_Init+0x236>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a55      	ldr	r2, [pc, #340]	; (8003a38 <HAL_GPIO_Init+0x338>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_Init+0x232>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a54      	ldr	r2, [pc, #336]	; (8003a3c <HAL_GPIO_Init+0x33c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_Init+0x22e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a53      	ldr	r2, [pc, #332]	; (8003a40 <HAL_GPIO_Init+0x340>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_Init+0x22a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_GPIO_Init+0x344>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x226>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a51      	ldr	r2, [pc, #324]	; (8003a48 <HAL_GPIO_Init+0x348>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x222>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a50      	ldr	r2, [pc, #320]	; (8003a4c <HAL_GPIO_Init+0x34c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x21e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4f      	ldr	r2, [pc, #316]	; (8003a50 <HAL_GPIO_Init+0x350>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x21a>
 8003916:	2309      	movs	r3, #9
 8003918:	e012      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800391a:	230a      	movs	r3, #10
 800391c:	e010      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800391e:	2308      	movs	r3, #8
 8003920:	e00e      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003922:	2307      	movs	r3, #7
 8003924:	e00c      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003926:	2306      	movs	r3, #6
 8003928:	e00a      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800392a:	2305      	movs	r3, #5
 800392c:	e008      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800392e:	2304      	movs	r3, #4
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003932:	2303      	movs	r3, #3
 8003934:	e004      	b.n	8003940 <HAL_GPIO_Init+0x240>
 8003936:	2302      	movs	r3, #2
 8003938:	e002      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_GPIO_Init+0x240>
 800393e:	2300      	movs	r3, #0
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f002 0203 	and.w	r2, r2, #3
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	4093      	lsls	r3, r2
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003950:	4935      	ldr	r1, [pc, #212]	; (8003a28 <HAL_GPIO_Init+0x328>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	3302      	adds	r3, #2
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395e:	4b3d      	ldr	r3, [pc, #244]	; (8003a54 <HAL_GPIO_Init+0x354>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003982:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <HAL_GPIO_Init+0x354>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003988:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <HAL_GPIO_Init+0x354>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <HAL_GPIO_Init+0x354>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x354>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_GPIO_Init+0x354>)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_GPIO_Init+0x354>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <HAL_GPIO_Init+0x354>)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	f67f ae84 	bls.w	800371c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40021c00 	.word	0x40021c00
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022400 	.word	0x40022400
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12b      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fa4a 	bl	8000f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af0:	f001 fa68 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a81      	ldr	r2, [pc, #516]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d807      	bhi.n	8003b10 <HAL_I2C_Init+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_I2C_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e006      	b.n	8003b1e <HAL_I2C_Init+0x92>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_I2C_Init+0x27c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a78      	ldr	r2, [pc, #480]	; (8003d0c <HAL_I2C_Init+0x280>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <HAL_I2C_Init+0xd4>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <HAL_I2C_Init+0xe8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_I2C_Init+0x284>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495c      	ldr	r1, [pc, #368]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d819      	bhi.n	8003bc8 <HAL_I2C_Init+0x13c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e59      	subs	r1, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba8:	400b      	ands	r3, r1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_I2C_Init+0x138>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	e051      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e04f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_I2C_Init+0x168>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e012      	b.n	8003c1a <HAL_I2C_Init+0x18e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x196>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_I2C_Init+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e58      	subs	r0, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6809      	ldr	r1, [r1, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6911      	ldr	r1, [r2, #16]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	001e847f 	.word	0x001e847f
 8003d08:	003d08ff 	.word	0x003d08ff
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d2e:	f7fd fb0b 	bl	8001348 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	f040 80d9 	bne.w	8003ef4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2319      	movs	r3, #25
 8003d48:	2201      	movs	r2, #1
 8003d4a:	496d      	ldr	r1, [pc, #436]	; (8003f00 <HAL_I2C_Mem_Write+0x1ec>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa9f 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_Mem_Write+0x56>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0c5      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d007      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	; 0x21
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a4d      	ldr	r2, [pc, #308]	; (8003f04 <HAL_I2C_Mem_Write+0x1f0>)
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd2:	88f8      	ldrh	r0, [r7, #6]
 8003dd4:	893a      	ldrh	r2, [r7, #8]
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4603      	mov	r3, r0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f9be 	bl	8004164 <I2C_RequestMemoryWrite>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d052      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e081      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb20 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x180>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1aa      	bne.n	8003df2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fb0c 	bl	80044be <I2C_WaitOnBTFFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d107      	bne.n	8003ec4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e016      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000

08003f08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	460b      	mov	r3, r1
 8003f16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7fd fa16 	bl	8001348 <HAL_GetTick>
 8003f1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	f040 8111 	bne.w	8004152 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2319      	movs	r3, #25
 8003f36:	2201      	movs	r2, #1
 8003f38:	4988      	ldr	r1, [pc, #544]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f9a8 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e104      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2C_IsDeviceReady+0x50>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0fd      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d007      	beq.n	8003f7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a70      	ldr	r2, [pc, #448]	; (8004160 <HAL_I2C_IsDeviceReady+0x258>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f966 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd8:	d103      	bne.n	8003fe2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0b6      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd f9a7 	bl	8001348 <HAL_GetTick>
 8003ffa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800402a:	e025      	b.n	8004078 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fd f98c 	bl	8001348 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <HAL_I2C_IsDeviceReady+0x13a>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	22a0      	movs	r2, #160	; 0xa0
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2ba0      	cmp	r3, #160	; 0xa0
 8004082:	d005      	beq.n	8004090 <HAL_I2C_IsDeviceReady+0x188>
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_I2C_IsDeviceReady+0x188>
 800408a:	7dbb      	ldrb	r3, [r7, #22]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0cd      	beq.n	800402c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d129      	bne.n	80040fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2319      	movs	r3, #25
 80040d2:	2201      	movs	r2, #1
 80040d4:	4921      	ldr	r1, [pc, #132]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f8da 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e036      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e02c      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004112:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2319      	movs	r3, #25
 800411a:	2201      	movs	r2, #1
 800411c:	490f      	ldr	r1, [pc, #60]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f8b6 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e012      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3301      	adds	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	f4ff af32 	bcc.w	8003fa2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000

08004164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2200      	movs	r2, #0
 8004196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f878 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d103      	bne.n	80041be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e05f      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <I2C_RequestMemoryWrite+0x128>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f8b0 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04c      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	6a39      	ldr	r1, [r7, #32]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f91a 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b04      	cmp	r3, #4
 8004214:	d107      	bne.n	8004226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e02b      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004230:	893b      	ldrh	r3, [r7, #8]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e021      	b.n	8004280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800423c:	893b      	ldrh	r3, [r7, #8]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b29b      	uxth	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8f4 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b04      	cmp	r3, #4
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e005      	b.n	8004282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004276:	893b      	ldrh	r3, [r7, #8]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a0:	e025      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d021      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fd f84d 	bl	8001348 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e023      	b.n	8004336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	e00c      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	429a      	cmp	r2, r3
 8004332:	d0b6      	beq.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	e051      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d123      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e046      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fc ffcb 	bl	8001348 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e020      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10c      	bne.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e00b      	b.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d18d      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004448:	e02d      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f878 	bl	8004540 <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02d      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d021      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fc ff71 	bl	8001348 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d1ca      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ca:	e02d      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f837 	bl	8004540 <I2C_IsAcknowledgeFailed>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e02d      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d021      	beq.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fc ff30 	bl	8001348 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d1ca      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d11b      	bne.n	8004590 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004560:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f043 0204 	orr.w	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d129      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b20      	cmp	r3, #32
 800462e:	d12a      	bne.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	f023 030f 	bic.w	r3, r3, #15
 8004656:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b29a      	uxth	r2, r3
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	4313      	orrs	r3, r2
 8004660:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	89fa      	ldrh	r2, [r7, #14]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e267      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d075      	beq.n	800479e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d112      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05b      	beq.n	800479c <HAL_RCC_OscConfig+0x108>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d157      	bne.n	800479c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e242      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x74>
 80046fa:	4b76      	ldr	r3, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a75      	ldr	r2, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x98>
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6f      	ldr	r2, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b6d      	ldr	r3, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6c      	ldr	r2, [pc, #432]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 800472c:	4b69      	ldr	r3, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a68      	ldr	r2, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fc fdfc 	bl	8001348 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fc fdf8 	bl	8001348 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e207      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xc0>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fc fde8 	bl	8001348 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800477c:	f7fc fde4 	bl	8001348 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1f3      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0xe8>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1c7      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4937      	ldr	r1, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e03a      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fc fd9d 	bl	8001348 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004812:	f7fc fd99 	bl	8001348 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1a8      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4925      	ldr	r1, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fc fd7c 	bl	8001348 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004854:	f7fc fd78 	bl	8001348 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e187      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d036      	beq.n	80048ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d016      	beq.n	80048b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc fd5c 	bl	8001348 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7fc fd58 	bl	8001348 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e167      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x200>
 80048b2:	e01b      	b.n	80048ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ba:	f7fc fd45 	bl	8001348 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c0:	e00e      	b.n	80048e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fc fd41 	bl	8001348 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d907      	bls.n	80048e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e150      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470000 	.word	0x42470000
 80048dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ea      	bne.n	80048c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8097 	beq.w	8004a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fe:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004926:	2301      	movs	r3, #1
 8004928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492a:	4b77      	ldr	r3, [pc, #476]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d118      	bne.n	8004968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004936:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004942:	f7fc fd01 	bl	8001348 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494a:	f7fc fcfd 	bl	8001348 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e10c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x2ea>
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a63      	ldr	r2, [pc, #396]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
 800497c:	e01c      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b05      	cmp	r3, #5
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x30c>
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a5e      	ldr	r2, [pc, #376]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	4b5c      	ldr	r3, [pc, #368]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 80049a0:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a54      	ldr	r2, [pc, #336]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0304 	bic.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fc fcc2 	bl	8001348 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fc fcbe 	bl	8001348 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e0cb      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ee      	beq.n	80049c8 <HAL_RCC_OscConfig+0x334>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7fc fcac 	bl	8001348 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fc fca8 	bl	8001348 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0b5      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ee      	bne.n	80049f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a1 	beq.w	8004b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a32:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d05c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d141      	bne.n	8004aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fc7c 	bl	8001348 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fc fc78 	bl	8001348 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e087      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fc fc51 	bl	8001348 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fc fc4d 	bl	8001348 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e05c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x416>
 8004ac8:	e054      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fc fc3a 	bl	8001348 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fc fc36 	bl	8001348 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e045      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x444>
 8004af6:	e03d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e038      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x4ec>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d028      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d121      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0cc      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b8      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	494d      	ldr	r1, [pc, #308]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e067      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fc fb68 	bl	8001348 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fc fb64 	bl	8001348 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e04f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20c      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e032      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4916      	ldr	r1, [pc, #88]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490e      	ldr	r1, [pc, #56]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0a:	f000 f889 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490a      	ldr	r1, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fc fac8 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	08006bf0 	.word	0x08006bf0
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d129      	bne.n	8004db6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6313      	str	r3, [r2, #48]	; 0x30
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	2302      	movs	r3, #2
 8004d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004d94:	f107 031c 	add.w	r3, r7, #28
 8004d98:	4619      	mov	r1, r3
 8004d9a:	481f      	ldr	r0, [pc, #124]	; (8004e18 <HAL_RCC_MCOConfig+0xc8>)
 8004d9c:	f7fe fcb0 	bl	8003700 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004da0:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4919      	ldr	r1, [pc, #100]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004db4:	e029      	b.n	8004e0a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	4619      	mov	r1, r3
 8004dee:	480b      	ldr	r0, [pc, #44]	; (8004e1c <HAL_RCC_MCOConfig+0xcc>)
 8004df0:	f7fe fc86 	bl	8003700 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	430b      	orrs	r3, r1
 8004e04:	4903      	ldr	r1, [pc, #12]	; (8004e14 <HAL_RCC_MCOConfig+0xc4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
}
 8004e0a:	bf00      	nop
 8004e0c:	3730      	adds	r7, #48	; 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40020000 	.word	0x40020000
 8004e1c:	40020800 	.word	0x40020800

08004e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e24:	b090      	sub	sp, #64	; 0x40
 8004e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e30:	2300      	movs	r3, #0
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e38:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d00d      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x40>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	f200 80a1 	bhi.w	8004f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x34>
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d003      	beq.n	8004e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e52:	e09b      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e54:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e58:	e09b      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e5a:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e5e:	e098      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e60:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e6a:	4b4d      	ldr	r3, [pc, #308]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b4a      	ldr	r3, [pc, #296]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	627a      	str	r2, [r7, #36]	; 0x24
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8c:	fb03 f201 	mul.w	r2, r3, r1
 8004e90:	2300      	movs	r3, #0
 8004e92:	fb00 f303 	mul.w	r3, r0, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	4a43      	ldr	r2, [pc, #268]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea0:	460a      	mov	r2, r1
 8004ea2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea6:	4413      	add	r3, r2
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	2200      	movs	r2, #0
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	61fa      	str	r2, [r7, #28]
 8004eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eba:	f7fb f9e9 	bl	8000290 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec6:	e053      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	2200      	movs	r2, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	617a      	str	r2, [r7, #20]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eda:	f04f 0b00 	mov.w	fp, #0
 8004ede:	4652      	mov	r2, sl
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	0159      	lsls	r1, r3, #5
 8004eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef0:	0150      	lsls	r0, r2, #5
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8004efa:	eb63 090b 	sbc.w	r9, r3, fp
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f12:	ebb2 0408 	subs.w	r4, r2, r8
 8004f16:	eb63 0509 	sbc.w	r5, r3, r9
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	00eb      	lsls	r3, r5, #3
 8004f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f28:	00e2      	lsls	r2, r4, #3
 8004f2a:	4614      	mov	r4, r2
 8004f2c:	461d      	mov	r5, r3
 8004f2e:	eb14 030a 	adds.w	r3, r4, sl
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	eb45 030b 	adc.w	r3, r5, fp
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f46:	4629      	mov	r1, r5
 8004f48:	028b      	lsls	r3, r1, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f50:	4621      	mov	r1, r4
 8004f52:	028a      	lsls	r2, r1, #10
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	60fa      	str	r2, [r7, #12]
 8004f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f64:	f7fb f994 	bl	8000290 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3740      	adds	r7, #64	; 0x40
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	017d7840 	.word	0x017d7840

08004fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000000 	.word	0x20000000

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4903      	ldr	r1, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	08006c00 	.word	0x08006c00

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	f7ff ffdc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0b5b      	lsrs	r3, r3, #13
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4903      	ldr	r1, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	08006c00 	.word	0x08006c00

08005014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e03f      	b.n	80050a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fb ffce 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fd7b 	bl	8005b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800506c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800507c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08a      	sub	sp, #40	; 0x28
 80050b2:	af02      	add	r7, sp, #8
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d17c      	bne.n	80051c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_UART_Transmit+0x2c>
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e075      	b.n	80051ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UART_Transmit+0x3e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e06e      	b.n	80051ca <HAL_UART_Transmit+0x11c>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2221      	movs	r2, #33	; 0x21
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005102:	f7fc f921 	bl	8001348 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d108      	bne.n	8005130 <HAL_UART_Transmit+0x82>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e003      	b.n	8005138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005140:	e02a      	b.n	8005198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 faf9 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e036      	b.n	80051ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3302      	adds	r3, #2
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e007      	b.n	800518a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1cf      	bne.n	8005142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fac9 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	; 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_UART_IRQHandler+0x66>
 8005226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbd3 	bl	80059de <UART_Receive_IT>
      return;
 8005238:	e256      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800523a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80de 	beq.w	8005400 <HAL_UART_IRQHandler+0x22c>
 8005244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005254:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80d1 	beq.w	8005400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_UART_IRQHandler+0xae>
 800526a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0201 	orr.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <HAL_UART_IRQHandler+0xd2>
 800528e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_UART_IRQHandler+0xf6>
 80052b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d011      	beq.n	80052fa <HAL_UART_IRQHandler+0x126>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d105      	bne.n	80052ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f043 0208 	orr.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 81ed 	beq.w	80056de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_UART_IRQHandler+0x14e>
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fb5e 	bl	80059de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_UART_IRQHandler+0x17a>
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04f      	beq.n	80053ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa66 	bl	8005820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d141      	bne.n	80053e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3314      	adds	r3, #20
 800538a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800538e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800539a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d9      	bne.n	8005362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	4a7d      	ldr	r2, [pc, #500]	; (80055b0 <HAL_UART_IRQHandler+0x3dc>)
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fc fd88 	bl	8001ed8 <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00e      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f99a 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e00a      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f996 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e006      	b.n	80053fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f992 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053fa:	e170      	b.n	80056de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	bf00      	nop
    return;
 80053fe:	e16e      	b.n	80056de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 814a 	bne.w	800569e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8143 	beq.w	800569e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 813c 	beq.w	800569e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	f040 80b4 	bne.w	80055b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8140 	beq.w	80056e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800546a:	429a      	cmp	r2, r3
 800546c:	f080 8139 	bcs.w	80056e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005476:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	f000 8088 	beq.w	8005596 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800549c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1d9      	bne.n	8005486 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e1      	bne.n	80054d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800551e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e3      	bne.n	800550e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	f023 0310 	bic.w	r3, r3, #16
 800556a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005578:	65ba      	str	r2, [r7, #88]	; 0x58
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800557e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e3      	bne.n	8005554 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc fc31 	bl	8001df8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8c0 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ac:	e099      	b.n	80056e2 <HAL_UART_IRQHandler+0x50e>
 80055ae:	bf00      	nop
 80055b0:	080058e7 	.word	0x080058e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 808b 	beq.w	80056e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	623b      	str	r3, [r7, #32]
   return(result);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005636:	633a      	str	r2, [r7, #48]	; 0x30
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f848 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800569c:	e023      	b.n	80056e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_UART_IRQHandler+0x4ea>
 80056aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f929 	bl	800590e <UART_Transmit_IT>
    return;
 80056bc:	e014      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <HAL_UART_IRQHandler+0x514>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f969 	bl	80059ae <UART_EndTransmit_IT>
    return;
 80056dc:	e004      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
    return;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
      return;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_UART_IRQHandler+0x514>
      return;
 80056e6:	bf00      	nop
  }
}
 80056e8:	37e8      	adds	r7, #232	; 0xe8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	e050      	b.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d04c      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <UART_WaitOnFlagUntilTimeout+0x30>
 8005764:	f7fb fdf0 	bl	8001348 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005770:	429a      	cmp	r2, r3
 8005772:	d241      	bcs.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005794:	637a      	str	r2, [r7, #52]	; 0x34
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800579a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	613b      	str	r3, [r7, #16]
   return(result);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057c8:	623a      	str	r2, [r7, #32]
 80057ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e00f      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	429a      	cmp	r2, r3
 8005814:	d09f      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3740      	adds	r7, #64	; 0x40
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b095      	sub	sp, #84	; 0x54
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005848:	643a      	str	r2, [r7, #64]	; 0x40
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3314      	adds	r3, #20
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d119      	bne.n	80058cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b8:	61ba      	str	r2, [r7, #24]
 80058ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058da:	bf00      	nop
 80058dc:	3754      	adds	r7, #84	; 0x54
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff ff09 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b21      	cmp	r3, #33	; 0x21
 8005920:	d13e      	bne.n	80059a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	d114      	bne.n	8005956 <UART_Transmit_IT+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]
 8005954:	e008      	b.n	8005968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6211      	str	r1, [r2, #32]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29b      	uxth	r3, r3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10f      	bne.n	800599c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800598a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe8e 	bl	80056f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b08c      	sub	sp, #48	; 0x30
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b22      	cmp	r3, #34	; 0x22
 80059f0:	f040 80ab 	bne.w	8005b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d117      	bne.n	8005a2e <UART_Receive_IT+0x50>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d113      	bne.n	8005a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a2c:	e026      	b.n	8005a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d007      	beq.n	8005a52 <UART_Receive_IT+0x74>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <UART_Receive_IT+0x82>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e008      	b.n	8005a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15a      	bne.n	8005b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0220 	bic.w	r2, r2, #32
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d135      	bne.n	8005b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	623a      	str	r2, [r7, #32]
 8005af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	69f9      	ldr	r1, [r7, #28]
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d10a      	bne.n	8005b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fdf9 	bl	800572c <HAL_UARTEx_RxEventCallback>
 8005b3a:	e002      	b.n	8005b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fde1 	bl	8005704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e002      	b.n	8005b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e000      	b.n	8005b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b4a:	2302      	movs	r3, #2
  }
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3730      	adds	r7, #48	; 0x30
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b58:	b0c0      	sub	sp, #256	; 0x100
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	ea40 0301 	orr.w	r3, r0, r1
 8005b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bac:	f021 010c 	bic.w	r1, r1, #12
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	6999      	ldr	r1, [r3, #24]
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	ea40 0301 	orr.w	r3, r0, r1
 8005bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b8f      	ldr	r3, [pc, #572]	; (8005e20 <UART_SetConfig+0x2cc>)
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d005      	beq.n	8005bf4 <UART_SetConfig+0xa0>
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b8d      	ldr	r3, [pc, #564]	; (8005e24 <UART_SetConfig+0x2d0>)
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d104      	bne.n	8005bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf4:	f7ff f9fa 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bfc:	e003      	b.n	8005c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bfe:	f7ff f9e1 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8005c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c10:	f040 810c 	bne.w	8005e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c26:	4622      	mov	r2, r4
 8005c28:	462b      	mov	r3, r5
 8005c2a:	1891      	adds	r1, r2, r2
 8005c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c2e:	415b      	adcs	r3, r3
 8005c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c36:	4621      	mov	r1, r4
 8005c38:	eb12 0801 	adds.w	r8, r2, r1
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	eb43 0901 	adc.w	r9, r3, r1
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c56:	4690      	mov	r8, r2
 8005c58:	4699      	mov	r9, r3
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	eb18 0303 	adds.w	r3, r8, r3
 8005c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c64:	462b      	mov	r3, r5
 8005c66:	eb49 0303 	adc.w	r3, r9, r3
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c82:	460b      	mov	r3, r1
 8005c84:	18db      	adds	r3, r3, r3
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
 8005c88:	4613      	mov	r3, r2
 8005c8a:	eb42 0303 	adc.w	r3, r2, r3
 8005c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c98:	f7fa fafa 	bl	8000290 <__aeabi_uldivmod>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	011c      	lsls	r4, r3, #4
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ccc:	4641      	mov	r1, r8
 8005cce:	eb12 0a01 	adds.w	sl, r2, r1
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cec:	4692      	mov	sl, r2
 8005cee:	469b      	mov	fp, r3
 8005cf0:	4643      	mov	r3, r8
 8005cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8005d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	18db      	adds	r3, r3, r3
 8005d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d1e:	4613      	mov	r3, r2
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d2e:	f7fa faaf 	bl	8000290 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	2264      	movs	r2, #100	; 0x64
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	1acb      	subs	r3, r1, r3
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005d50:	fba3 2302 	umull	r2, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d5c:	441c      	add	r4, r3
 8005d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	1891      	adds	r1, r2, r2
 8005d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d78:	415b      	adcs	r3, r3
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d80:	4641      	mov	r1, r8
 8005d82:	1851      	adds	r1, r2, r1
 8005d84:	6339      	str	r1, [r7, #48]	; 0x30
 8005d86:	4649      	mov	r1, r9
 8005d88:	414b      	adcs	r3, r1
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d98:	4659      	mov	r1, fp
 8005d9a:	00cb      	lsls	r3, r1, #3
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da2:	4651      	mov	r1, sl
 8005da4:	00ca      	lsls	r2, r1, #3
 8005da6:	4610      	mov	r0, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	4642      	mov	r2, r8
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db4:	464b      	mov	r3, r9
 8005db6:	460a      	mov	r2, r1
 8005db8:	eb42 0303 	adc.w	r3, r2, r3
 8005dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	18db      	adds	r3, r3, r3
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dda:	4613      	mov	r3, r2
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dea:	f7fa fa51 	bl	8000290 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <UART_SetConfig+0x2d4>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4422      	add	r2, r4
 8005e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e1c:	e105      	b.n	800602a <UART_SetConfig+0x4d6>
 8005e1e:	bf00      	nop
 8005e20:	40011000 	.word	0x40011000
 8005e24:	40011400 	.word	0x40011400
 8005e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e3e:	4642      	mov	r2, r8
 8005e40:	464b      	mov	r3, r9
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	6239      	str	r1, [r7, #32]
 8005e46:	415b      	adcs	r3, r3
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e4e:	4641      	mov	r1, r8
 8005e50:	1854      	adds	r4, r2, r1
 8005e52:	4649      	mov	r1, r9
 8005e54:	eb43 0501 	adc.w	r5, r3, r1
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	00eb      	lsls	r3, r5, #3
 8005e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e66:	00e2      	lsls	r2, r4, #3
 8005e68:	4614      	mov	r4, r2
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	18e3      	adds	r3, r4, r3
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e74:	464b      	mov	r3, r9
 8005e76:	eb45 0303 	adc.w	r3, r5, r3
 8005e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	008b      	lsls	r3, r1, #2
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	008a      	lsls	r2, r1, #2
 8005ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005eac:	f7fa f9f0 	bl	8000290 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4b60      	ldr	r3, [pc, #384]	; (8006038 <UART_SetConfig+0x4e4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	011c      	lsls	r4, r3, #4
 8005ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	61b9      	str	r1, [r7, #24]
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	1851      	adds	r1, r2, r1
 8005ee4:	6139      	str	r1, [r7, #16]
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	414b      	adcs	r3, r1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef8:	4659      	mov	r1, fp
 8005efa:	00cb      	lsls	r3, r1, #3
 8005efc:	4651      	mov	r1, sl
 8005efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f02:	4651      	mov	r1, sl
 8005f04:	00ca      	lsls	r2, r1, #3
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f14:	464b      	mov	r3, r9
 8005f16:	460a      	mov	r2, r1
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f38:	4649      	mov	r1, r9
 8005f3a:	008b      	lsls	r3, r1, #2
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f42:	4641      	mov	r1, r8
 8005f44:	008a      	lsls	r2, r1, #2
 8005f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f4a:	f7fa f9a1 	bl	8000290 <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <UART_SetConfig+0x4e4>)
 8005f54:	fba3 1302 	umull	r1, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <UART_SetConfig+0x4e4>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f72:	441c      	add	r4, r3
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f82:	4642      	mov	r2, r8
 8005f84:	464b      	mov	r3, r9
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f92:	4641      	mov	r1, r8
 8005f94:	1851      	adds	r1, r2, r1
 8005f96:	6039      	str	r1, [r7, #0]
 8005f98:	4649      	mov	r1, r9
 8005f9a:	414b      	adcs	r3, r1
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005faa:	4659      	mov	r1, fp
 8005fac:	00cb      	lsls	r3, r1, #3
 8005fae:	4651      	mov	r1, sl
 8005fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	00ca      	lsls	r2, r1, #3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd8:	667a      	str	r2, [r7, #100]	; 0x64
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	008b      	lsls	r3, r1, #2
 8005fea:	4641      	mov	r1, r8
 8005fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	008a      	lsls	r2, r1, #2
 8005ff4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ff8:	f7fa f94a 	bl	8000290 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <UART_SetConfig+0x4e4>)
 8006002:	fba3 1302 	umull	r1, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2164      	movs	r1, #100	; 0x64
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	3332      	adds	r3, #50	; 0x32
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <UART_SetConfig+0x4e4>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4422      	add	r2, r4
 8006028:	609a      	str	r2, [r3, #8]
}
 800602a:	bf00      	nop
 800602c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	51eb851f 	.word	0x51eb851f

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000000c 	.word	0x2000000c

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4d0d      	ldr	r5, [pc, #52]	; (8006080 <__libc_init_array+0x38>)
 800604c:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	2600      	movs	r6, #0
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	4d0b      	ldr	r5, [pc, #44]	; (8006088 <__libc_init_array+0x40>)
 800605a:	4c0c      	ldr	r4, [pc, #48]	; (800608c <__libc_init_array+0x44>)
 800605c:	f000 fc8e 	bl	800697c <_init>
 8006060:	1b64      	subs	r4, r4, r5
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	2600      	movs	r6, #0
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	08006c4c 	.word	0x08006c4c
 8006084:	08006c4c 	.word	0x08006c4c
 8006088:	08006c4c 	.word	0x08006c4c
 800608c:	08006c50 	.word	0x08006c50

08006090 <memset>:
 8006090:	4402      	add	r2, r0
 8006092:	4603      	mov	r3, r0
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	f803 1b01 	strb.w	r1, [r3], #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <siprintf>:
 80060a0:	b40e      	push	{r1, r2, r3}
 80060a2:	b500      	push	{lr}
 80060a4:	b09c      	sub	sp, #112	; 0x70
 80060a6:	ab1d      	add	r3, sp, #116	; 0x74
 80060a8:	9002      	str	r0, [sp, #8]
 80060aa:	9006      	str	r0, [sp, #24]
 80060ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060b0:	4809      	ldr	r0, [pc, #36]	; (80060d8 <siprintf+0x38>)
 80060b2:	9107      	str	r1, [sp, #28]
 80060b4:	9104      	str	r1, [sp, #16]
 80060b6:	4909      	ldr	r1, [pc, #36]	; (80060dc <siprintf+0x3c>)
 80060b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060bc:	9105      	str	r1, [sp, #20]
 80060be:	6800      	ldr	r0, [r0, #0]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	a902      	add	r1, sp, #8
 80060c4:	f000 f868 	bl	8006198 <_svfiprintf_r>
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	b01c      	add	sp, #112	; 0x70
 80060d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	ffff0208 	.word	0xffff0208

080060e0 <__ssputs_r>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	688e      	ldr	r6, [r1, #8]
 80060e6:	429e      	cmp	r6, r3
 80060e8:	4682      	mov	sl, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	4690      	mov	r8, r2
 80060ee:	461f      	mov	r7, r3
 80060f0:	d838      	bhi.n	8006164 <__ssputs_r+0x84>
 80060f2:	898a      	ldrh	r2, [r1, #12]
 80060f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060f8:	d032      	beq.n	8006160 <__ssputs_r+0x80>
 80060fa:	6825      	ldr	r5, [r4, #0]
 80060fc:	6909      	ldr	r1, [r1, #16]
 80060fe:	eba5 0901 	sub.w	r9, r5, r1
 8006102:	6965      	ldr	r5, [r4, #20]
 8006104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800610c:	3301      	adds	r3, #1
 800610e:	444b      	add	r3, r9
 8006110:	106d      	asrs	r5, r5, #1
 8006112:	429d      	cmp	r5, r3
 8006114:	bf38      	it	cc
 8006116:	461d      	movcc	r5, r3
 8006118:	0553      	lsls	r3, r2, #21
 800611a:	d531      	bpl.n	8006180 <__ssputs_r+0xa0>
 800611c:	4629      	mov	r1, r5
 800611e:	f000 fb63 	bl	80067e8 <_malloc_r>
 8006122:	4606      	mov	r6, r0
 8006124:	b950      	cbnz	r0, 800613c <__ssputs_r+0x5c>
 8006126:	230c      	movs	r3, #12
 8006128:	f8ca 3000 	str.w	r3, [sl]
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	6921      	ldr	r1, [r4, #16]
 800613e:	464a      	mov	r2, r9
 8006140:	f000 fabe 	bl	80066c0 <memcpy>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	6126      	str	r6, [r4, #16]
 8006152:	6165      	str	r5, [r4, #20]
 8006154:	444e      	add	r6, r9
 8006156:	eba5 0509 	sub.w	r5, r5, r9
 800615a:	6026      	str	r6, [r4, #0]
 800615c:	60a5      	str	r5, [r4, #8]
 800615e:	463e      	mov	r6, r7
 8006160:	42be      	cmp	r6, r7
 8006162:	d900      	bls.n	8006166 <__ssputs_r+0x86>
 8006164:	463e      	mov	r6, r7
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	4632      	mov	r2, r6
 800616a:	4641      	mov	r1, r8
 800616c:	f000 fab6 	bl	80066dc <memmove>
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	1b9b      	subs	r3, r3, r6
 8006174:	60a3      	str	r3, [r4, #8]
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	4433      	add	r3, r6
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	2000      	movs	r0, #0
 800617e:	e7db      	b.n	8006138 <__ssputs_r+0x58>
 8006180:	462a      	mov	r2, r5
 8006182:	f000 fba5 	bl	80068d0 <_realloc_r>
 8006186:	4606      	mov	r6, r0
 8006188:	2800      	cmp	r0, #0
 800618a:	d1e1      	bne.n	8006150 <__ssputs_r+0x70>
 800618c:	6921      	ldr	r1, [r4, #16]
 800618e:	4650      	mov	r0, sl
 8006190:	f000 fabe 	bl	8006710 <_free_r>
 8006194:	e7c7      	b.n	8006126 <__ssputs_r+0x46>
	...

08006198 <_svfiprintf_r>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	4698      	mov	r8, r3
 800619e:	898b      	ldrh	r3, [r1, #12]
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	b09d      	sub	sp, #116	; 0x74
 80061a4:	4607      	mov	r7, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	d50e      	bpl.n	80061ca <_svfiprintf_r+0x32>
 80061ac:	690b      	ldr	r3, [r1, #16]
 80061ae:	b963      	cbnz	r3, 80061ca <_svfiprintf_r+0x32>
 80061b0:	2140      	movs	r1, #64	; 0x40
 80061b2:	f000 fb19 	bl	80067e8 <_malloc_r>
 80061b6:	6028      	str	r0, [r5, #0]
 80061b8:	6128      	str	r0, [r5, #16]
 80061ba:	b920      	cbnz	r0, 80061c6 <_svfiprintf_r+0x2e>
 80061bc:	230c      	movs	r3, #12
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e0d1      	b.n	800636a <_svfiprintf_r+0x1d2>
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	616b      	str	r3, [r5, #20]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	2320      	movs	r3, #32
 80061d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d8:	2330      	movs	r3, #48	; 0x30
 80061da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006384 <_svfiprintf_r+0x1ec>
 80061de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e2:	f04f 0901 	mov.w	r9, #1
 80061e6:	4623      	mov	r3, r4
 80061e8:	469a      	mov	sl, r3
 80061ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ee:	b10a      	cbz	r2, 80061f4 <_svfiprintf_r+0x5c>
 80061f0:	2a25      	cmp	r2, #37	; 0x25
 80061f2:	d1f9      	bne.n	80061e8 <_svfiprintf_r+0x50>
 80061f4:	ebba 0b04 	subs.w	fp, sl, r4
 80061f8:	d00b      	beq.n	8006212 <_svfiprintf_r+0x7a>
 80061fa:	465b      	mov	r3, fp
 80061fc:	4622      	mov	r2, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff ff6d 	bl	80060e0 <__ssputs_r>
 8006206:	3001      	adds	r0, #1
 8006208:	f000 80aa 	beq.w	8006360 <_svfiprintf_r+0x1c8>
 800620c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800620e:	445a      	add	r2, fp
 8006210:	9209      	str	r2, [sp, #36]	; 0x24
 8006212:	f89a 3000 	ldrb.w	r3, [sl]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80a2 	beq.w	8006360 <_svfiprintf_r+0x1c8>
 800621c:	2300      	movs	r3, #0
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006226:	f10a 0a01 	add.w	sl, sl, #1
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006232:	931a      	str	r3, [sp, #104]	; 0x68
 8006234:	4654      	mov	r4, sl
 8006236:	2205      	movs	r2, #5
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	4851      	ldr	r0, [pc, #324]	; (8006384 <_svfiprintf_r+0x1ec>)
 800623e:	f7f9 ffd7 	bl	80001f0 <memchr>
 8006242:	9a04      	ldr	r2, [sp, #16]
 8006244:	b9d8      	cbnz	r0, 800627e <_svfiprintf_r+0xe6>
 8006246:	06d0      	lsls	r0, r2, #27
 8006248:	bf44      	itt	mi
 800624a:	2320      	movmi	r3, #32
 800624c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006250:	0711      	lsls	r1, r2, #28
 8006252:	bf44      	itt	mi
 8006254:	232b      	movmi	r3, #43	; 0x2b
 8006256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b2a      	cmp	r3, #42	; 0x2a
 8006260:	d015      	beq.n	800628e <_svfiprintf_r+0xf6>
 8006262:	9a07      	ldr	r2, [sp, #28]
 8006264:	4654      	mov	r4, sl
 8006266:	2000      	movs	r0, #0
 8006268:	f04f 0c0a 	mov.w	ip, #10
 800626c:	4621      	mov	r1, r4
 800626e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006272:	3b30      	subs	r3, #48	; 0x30
 8006274:	2b09      	cmp	r3, #9
 8006276:	d94e      	bls.n	8006316 <_svfiprintf_r+0x17e>
 8006278:	b1b0      	cbz	r0, 80062a8 <_svfiprintf_r+0x110>
 800627a:	9207      	str	r2, [sp, #28]
 800627c:	e014      	b.n	80062a8 <_svfiprintf_r+0x110>
 800627e:	eba0 0308 	sub.w	r3, r0, r8
 8006282:	fa09 f303 	lsl.w	r3, r9, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	46a2      	mov	sl, r4
 800628c:	e7d2      	b.n	8006234 <_svfiprintf_r+0x9c>
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	9103      	str	r1, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfbb      	ittet	lt
 800629a:	425b      	neglt	r3, r3
 800629c:	f042 0202 	orrlt.w	r2, r2, #2
 80062a0:	9307      	strge	r3, [sp, #28]
 80062a2:	9307      	strlt	r3, [sp, #28]
 80062a4:	bfb8      	it	lt
 80062a6:	9204      	strlt	r2, [sp, #16]
 80062a8:	7823      	ldrb	r3, [r4, #0]
 80062aa:	2b2e      	cmp	r3, #46	; 0x2e
 80062ac:	d10c      	bne.n	80062c8 <_svfiprintf_r+0x130>
 80062ae:	7863      	ldrb	r3, [r4, #1]
 80062b0:	2b2a      	cmp	r3, #42	; 0x2a
 80062b2:	d135      	bne.n	8006320 <_svfiprintf_r+0x188>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	9203      	str	r2, [sp, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bfb8      	it	lt
 80062c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062c4:	3402      	adds	r4, #2
 80062c6:	9305      	str	r3, [sp, #20]
 80062c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006394 <_svfiprintf_r+0x1fc>
 80062cc:	7821      	ldrb	r1, [r4, #0]
 80062ce:	2203      	movs	r2, #3
 80062d0:	4650      	mov	r0, sl
 80062d2:	f7f9 ff8d 	bl	80001f0 <memchr>
 80062d6:	b140      	cbz	r0, 80062ea <_svfiprintf_r+0x152>
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	eba0 000a 	sub.w	r0, r0, sl
 80062de:	fa03 f000 	lsl.w	r0, r3, r0
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	4303      	orrs	r3, r0
 80062e6:	3401      	adds	r4, #1
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ee:	4826      	ldr	r0, [pc, #152]	; (8006388 <_svfiprintf_r+0x1f0>)
 80062f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062f4:	2206      	movs	r2, #6
 80062f6:	f7f9 ff7b 	bl	80001f0 <memchr>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d038      	beq.n	8006370 <_svfiprintf_r+0x1d8>
 80062fe:	4b23      	ldr	r3, [pc, #140]	; (800638c <_svfiprintf_r+0x1f4>)
 8006300:	bb1b      	cbnz	r3, 800634a <_svfiprintf_r+0x1b2>
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	3307      	adds	r3, #7
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	3308      	adds	r3, #8
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	4433      	add	r3, r6
 8006312:	9309      	str	r3, [sp, #36]	; 0x24
 8006314:	e767      	b.n	80061e6 <_svfiprintf_r+0x4e>
 8006316:	fb0c 3202 	mla	r2, ip, r2, r3
 800631a:	460c      	mov	r4, r1
 800631c:	2001      	movs	r0, #1
 800631e:	e7a5      	b.n	800626c <_svfiprintf_r+0xd4>
 8006320:	2300      	movs	r3, #0
 8006322:	3401      	adds	r4, #1
 8006324:	9305      	str	r3, [sp, #20]
 8006326:	4619      	mov	r1, r3
 8006328:	f04f 0c0a 	mov.w	ip, #10
 800632c:	4620      	mov	r0, r4
 800632e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006332:	3a30      	subs	r2, #48	; 0x30
 8006334:	2a09      	cmp	r2, #9
 8006336:	d903      	bls.n	8006340 <_svfiprintf_r+0x1a8>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0c5      	beq.n	80062c8 <_svfiprintf_r+0x130>
 800633c:	9105      	str	r1, [sp, #20]
 800633e:	e7c3      	b.n	80062c8 <_svfiprintf_r+0x130>
 8006340:	fb0c 2101 	mla	r1, ip, r1, r2
 8006344:	4604      	mov	r4, r0
 8006346:	2301      	movs	r3, #1
 8006348:	e7f0      	b.n	800632c <_svfiprintf_r+0x194>
 800634a:	ab03      	add	r3, sp, #12
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	462a      	mov	r2, r5
 8006350:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <_svfiprintf_r+0x1f8>)
 8006352:	a904      	add	r1, sp, #16
 8006354:	4638      	mov	r0, r7
 8006356:	f3af 8000 	nop.w
 800635a:	1c42      	adds	r2, r0, #1
 800635c:	4606      	mov	r6, r0
 800635e:	d1d6      	bne.n	800630e <_svfiprintf_r+0x176>
 8006360:	89ab      	ldrh	r3, [r5, #12]
 8006362:	065b      	lsls	r3, r3, #25
 8006364:	f53f af2c 	bmi.w	80061c0 <_svfiprintf_r+0x28>
 8006368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800636a:	b01d      	add	sp, #116	; 0x74
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	ab03      	add	r3, sp, #12
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	462a      	mov	r2, r5
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <_svfiprintf_r+0x1f8>)
 8006378:	a904      	add	r1, sp, #16
 800637a:	4638      	mov	r0, r7
 800637c:	f000 f87a 	bl	8006474 <_printf_i>
 8006380:	e7eb      	b.n	800635a <_svfiprintf_r+0x1c2>
 8006382:	bf00      	nop
 8006384:	08006c10 	.word	0x08006c10
 8006388:	08006c1a 	.word	0x08006c1a
 800638c:	00000000 	.word	0x00000000
 8006390:	080060e1 	.word	0x080060e1
 8006394:	08006c16 	.word	0x08006c16

08006398 <_printf_common>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	4616      	mov	r6, r2
 800639e:	4699      	mov	r9, r3
 80063a0:	688a      	ldr	r2, [r1, #8]
 80063a2:	690b      	ldr	r3, [r1, #16]
 80063a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	bfb8      	it	lt
 80063ac:	4613      	movlt	r3, r2
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b4:	4607      	mov	r7, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b10a      	cbz	r2, 80063be <_printf_common+0x26>
 80063ba:	3301      	adds	r3, #1
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	0699      	lsls	r1, r3, #26
 80063c2:	bf42      	ittt	mi
 80063c4:	6833      	ldrmi	r3, [r6, #0]
 80063c6:	3302      	addmi	r3, #2
 80063c8:	6033      	strmi	r3, [r6, #0]
 80063ca:	6825      	ldr	r5, [r4, #0]
 80063cc:	f015 0506 	ands.w	r5, r5, #6
 80063d0:	d106      	bne.n	80063e0 <_printf_common+0x48>
 80063d2:	f104 0a19 	add.w	sl, r4, #25
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	6832      	ldr	r2, [r6, #0]
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dc26      	bgt.n	800642e <_printf_common+0x96>
 80063e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e4:	1e13      	subs	r3, r2, #0
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	bf18      	it	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	0692      	lsls	r2, r2, #26
 80063ee:	d42b      	bmi.n	8006448 <_printf_common+0xb0>
 80063f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f4:	4649      	mov	r1, r9
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d01e      	beq.n	800643c <_printf_common+0xa4>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	68e5      	ldr	r5, [r4, #12]
 8006402:	6832      	ldr	r2, [r6, #0]
 8006404:	f003 0306 	and.w	r3, r3, #6
 8006408:	2b04      	cmp	r3, #4
 800640a:	bf08      	it	eq
 800640c:	1aad      	subeq	r5, r5, r2
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	6922      	ldr	r2, [r4, #16]
 8006412:	bf0c      	ite	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	2500      	movne	r5, #0
 800641a:	4293      	cmp	r3, r2
 800641c:	bfc4      	itt	gt
 800641e:	1a9b      	subgt	r3, r3, r2
 8006420:	18ed      	addgt	r5, r5, r3
 8006422:	2600      	movs	r6, #0
 8006424:	341a      	adds	r4, #26
 8006426:	42b5      	cmp	r5, r6
 8006428:	d11a      	bne.n	8006460 <_printf_common+0xc8>
 800642a:	2000      	movs	r0, #0
 800642c:	e008      	b.n	8006440 <_printf_common+0xa8>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4649      	mov	r1, r9
 8006434:	4638      	mov	r0, r7
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d103      	bne.n	8006444 <_printf_common+0xac>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	3501      	adds	r5, #1
 8006446:	e7c6      	b.n	80063d6 <_printf_common+0x3e>
 8006448:	18e1      	adds	r1, r4, r3
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	2030      	movs	r0, #48	; 0x30
 800644e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006452:	4422      	add	r2, r4
 8006454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800645c:	3302      	adds	r3, #2
 800645e:	e7c7      	b.n	80063f0 <_printf_common+0x58>
 8006460:	2301      	movs	r3, #1
 8006462:	4622      	mov	r2, r4
 8006464:	4649      	mov	r1, r9
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d0e6      	beq.n	800643c <_printf_common+0xa4>
 800646e:	3601      	adds	r6, #1
 8006470:	e7d9      	b.n	8006426 <_printf_common+0x8e>
	...

08006474 <_printf_i>:
 8006474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	7e0f      	ldrb	r7, [r1, #24]
 800647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800647c:	2f78      	cmp	r7, #120	; 0x78
 800647e:	4691      	mov	r9, r2
 8006480:	4680      	mov	r8, r0
 8006482:	460c      	mov	r4, r1
 8006484:	469a      	mov	sl, r3
 8006486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800648a:	d807      	bhi.n	800649c <_printf_i+0x28>
 800648c:	2f62      	cmp	r7, #98	; 0x62
 800648e:	d80a      	bhi.n	80064a6 <_printf_i+0x32>
 8006490:	2f00      	cmp	r7, #0
 8006492:	f000 80d8 	beq.w	8006646 <_printf_i+0x1d2>
 8006496:	2f58      	cmp	r7, #88	; 0x58
 8006498:	f000 80a3 	beq.w	80065e2 <_printf_i+0x16e>
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a4:	e03a      	b.n	800651c <_printf_i+0xa8>
 80064a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064aa:	2b15      	cmp	r3, #21
 80064ac:	d8f6      	bhi.n	800649c <_printf_i+0x28>
 80064ae:	a101      	add	r1, pc, #4	; (adr r1, 80064b4 <_printf_i+0x40>)
 80064b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b4:	0800650d 	.word	0x0800650d
 80064b8:	08006521 	.word	0x08006521
 80064bc:	0800649d 	.word	0x0800649d
 80064c0:	0800649d 	.word	0x0800649d
 80064c4:	0800649d 	.word	0x0800649d
 80064c8:	0800649d 	.word	0x0800649d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800649d 	.word	0x0800649d
 80064d4:	0800649d 	.word	0x0800649d
 80064d8:	0800649d 	.word	0x0800649d
 80064dc:	0800649d 	.word	0x0800649d
 80064e0:	0800662d 	.word	0x0800662d
 80064e4:	08006551 	.word	0x08006551
 80064e8:	0800660f 	.word	0x0800660f
 80064ec:	0800649d 	.word	0x0800649d
 80064f0:	0800649d 	.word	0x0800649d
 80064f4:	0800664f 	.word	0x0800664f
 80064f8:	0800649d 	.word	0x0800649d
 80064fc:	08006551 	.word	0x08006551
 8006500:	0800649d 	.word	0x0800649d
 8006504:	0800649d 	.word	0x0800649d
 8006508:	08006617 	.word	0x08006617
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800651c:	2301      	movs	r3, #1
 800651e:	e0a3      	b.n	8006668 <_printf_i+0x1f4>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	6829      	ldr	r1, [r5, #0]
 8006524:	0606      	lsls	r6, r0, #24
 8006526:	f101 0304 	add.w	r3, r1, #4
 800652a:	d50a      	bpl.n	8006542 <_printf_i+0xce>
 800652c:	680e      	ldr	r6, [r1, #0]
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	2e00      	cmp	r6, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xc8>
 8006534:	232d      	movs	r3, #45	; 0x2d
 8006536:	4276      	negs	r6, r6
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653c:	485e      	ldr	r0, [pc, #376]	; (80066b8 <_printf_i+0x244>)
 800653e:	230a      	movs	r3, #10
 8006540:	e019      	b.n	8006576 <_printf_i+0x102>
 8006542:	680e      	ldr	r6, [r1, #0]
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800654a:	bf18      	it	ne
 800654c:	b236      	sxthne	r6, r6
 800654e:	e7ef      	b.n	8006530 <_printf_i+0xbc>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	0601      	lsls	r1, r0, #24
 800655a:	d501      	bpl.n	8006560 <_printf_i+0xec>
 800655c:	681e      	ldr	r6, [r3, #0]
 800655e:	e002      	b.n	8006566 <_printf_i+0xf2>
 8006560:	0646      	lsls	r6, r0, #25
 8006562:	d5fb      	bpl.n	800655c <_printf_i+0xe8>
 8006564:	881e      	ldrh	r6, [r3, #0]
 8006566:	4854      	ldr	r0, [pc, #336]	; (80066b8 <_printf_i+0x244>)
 8006568:	2f6f      	cmp	r7, #111	; 0x6f
 800656a:	bf0c      	ite	eq
 800656c:	2308      	moveq	r3, #8
 800656e:	230a      	movne	r3, #10
 8006570:	2100      	movs	r1, #0
 8006572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006576:	6865      	ldr	r5, [r4, #4]
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	2d00      	cmp	r5, #0
 800657c:	bfa2      	ittt	ge
 800657e:	6821      	ldrge	r1, [r4, #0]
 8006580:	f021 0104 	bicge.w	r1, r1, #4
 8006584:	6021      	strge	r1, [r4, #0]
 8006586:	b90e      	cbnz	r6, 800658c <_printf_i+0x118>
 8006588:	2d00      	cmp	r5, #0
 800658a:	d04d      	beq.n	8006628 <_printf_i+0x1b4>
 800658c:	4615      	mov	r5, r2
 800658e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006592:	fb03 6711 	mls	r7, r3, r1, r6
 8006596:	5dc7      	ldrb	r7, [r0, r7]
 8006598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800659c:	4637      	mov	r7, r6
 800659e:	42bb      	cmp	r3, r7
 80065a0:	460e      	mov	r6, r1
 80065a2:	d9f4      	bls.n	800658e <_printf_i+0x11a>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10b      	bne.n	80065c0 <_printf_i+0x14c>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07de      	lsls	r6, r3, #31
 80065ac:	d508      	bpl.n	80065c0 <_printf_i+0x14c>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4299      	cmp	r1, r3
 80065b4:	bfde      	ittt	le
 80065b6:	2330      	movle	r3, #48	; 0x30
 80065b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065c0:	1b52      	subs	r2, r2, r5
 80065c2:	6122      	str	r2, [r4, #16]
 80065c4:	f8cd a000 	str.w	sl, [sp]
 80065c8:	464b      	mov	r3, r9
 80065ca:	aa03      	add	r2, sp, #12
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff fee2 	bl	8006398 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d14c      	bne.n	8006672 <_printf_i+0x1fe>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b004      	add	sp, #16
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	4835      	ldr	r0, [pc, #212]	; (80066b8 <_printf_i+0x244>)
 80065e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065e8:	6829      	ldr	r1, [r5, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80065f0:	6029      	str	r1, [r5, #0]
 80065f2:	061d      	lsls	r5, r3, #24
 80065f4:	d514      	bpl.n	8006620 <_printf_i+0x1ac>
 80065f6:	07df      	lsls	r7, r3, #31
 80065f8:	bf44      	itt	mi
 80065fa:	f043 0320 	orrmi.w	r3, r3, #32
 80065fe:	6023      	strmi	r3, [r4, #0]
 8006600:	b91e      	cbnz	r6, 800660a <_printf_i+0x196>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f023 0320 	bic.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2310      	movs	r3, #16
 800660c:	e7b0      	b.n	8006570 <_printf_i+0xfc>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f043 0320 	orr.w	r3, r3, #32
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	2378      	movs	r3, #120	; 0x78
 8006618:	4828      	ldr	r0, [pc, #160]	; (80066bc <_printf_i+0x248>)
 800661a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800661e:	e7e3      	b.n	80065e8 <_printf_i+0x174>
 8006620:	0659      	lsls	r1, r3, #25
 8006622:	bf48      	it	mi
 8006624:	b2b6      	uxthmi	r6, r6
 8006626:	e7e6      	b.n	80065f6 <_printf_i+0x182>
 8006628:	4615      	mov	r5, r2
 800662a:	e7bb      	b.n	80065a4 <_printf_i+0x130>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	6826      	ldr	r6, [r4, #0]
 8006630:	6961      	ldr	r1, [r4, #20]
 8006632:	1d18      	adds	r0, r3, #4
 8006634:	6028      	str	r0, [r5, #0]
 8006636:	0635      	lsls	r5, r6, #24
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	d501      	bpl.n	8006640 <_printf_i+0x1cc>
 800663c:	6019      	str	r1, [r3, #0]
 800663e:	e002      	b.n	8006646 <_printf_i+0x1d2>
 8006640:	0670      	lsls	r0, r6, #25
 8006642:	d5fb      	bpl.n	800663c <_printf_i+0x1c8>
 8006644:	8019      	strh	r1, [r3, #0]
 8006646:	2300      	movs	r3, #0
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	4615      	mov	r5, r2
 800664c:	e7ba      	b.n	80065c4 <_printf_i+0x150>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	681d      	ldr	r5, [r3, #0]
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	2100      	movs	r1, #0
 800665a:	4628      	mov	r0, r5
 800665c:	f7f9 fdc8 	bl	80001f0 <memchr>
 8006660:	b108      	cbz	r0, 8006666 <_printf_i+0x1f2>
 8006662:	1b40      	subs	r0, r0, r5
 8006664:	6060      	str	r0, [r4, #4]
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	2300      	movs	r3, #0
 800666c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006670:	e7a8      	b.n	80065c4 <_printf_i+0x150>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	462a      	mov	r2, r5
 8006676:	4649      	mov	r1, r9
 8006678:	4640      	mov	r0, r8
 800667a:	47d0      	blx	sl
 800667c:	3001      	adds	r0, #1
 800667e:	d0ab      	beq.n	80065d8 <_printf_i+0x164>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	079b      	lsls	r3, r3, #30
 8006684:	d413      	bmi.n	80066ae <_printf_i+0x23a>
 8006686:	68e0      	ldr	r0, [r4, #12]
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	4298      	cmp	r0, r3
 800668c:	bfb8      	it	lt
 800668e:	4618      	movlt	r0, r3
 8006690:	e7a4      	b.n	80065dc <_printf_i+0x168>
 8006692:	2301      	movs	r3, #1
 8006694:	4632      	mov	r2, r6
 8006696:	4649      	mov	r1, r9
 8006698:	4640      	mov	r0, r8
 800669a:	47d0      	blx	sl
 800669c:	3001      	adds	r0, #1
 800669e:	d09b      	beq.n	80065d8 <_printf_i+0x164>
 80066a0:	3501      	adds	r5, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	dcf2      	bgt.n	8006692 <_printf_i+0x21e>
 80066ac:	e7eb      	b.n	8006686 <_printf_i+0x212>
 80066ae:	2500      	movs	r5, #0
 80066b0:	f104 0619 	add.w	r6, r4, #25
 80066b4:	e7f5      	b.n	80066a2 <_printf_i+0x22e>
 80066b6:	bf00      	nop
 80066b8:	08006c21 	.word	0x08006c21
 80066bc:	08006c32 	.word	0x08006c32

080066c0 <memcpy>:
 80066c0:	440a      	add	r2, r1
 80066c2:	4291      	cmp	r1, r2
 80066c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c8:	d100      	bne.n	80066cc <memcpy+0xc>
 80066ca:	4770      	bx	lr
 80066cc:	b510      	push	{r4, lr}
 80066ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d1f9      	bne.n	80066ce <memcpy+0xe>
 80066da:	bd10      	pop	{r4, pc}

080066dc <memmove>:
 80066dc:	4288      	cmp	r0, r1
 80066de:	b510      	push	{r4, lr}
 80066e0:	eb01 0402 	add.w	r4, r1, r2
 80066e4:	d902      	bls.n	80066ec <memmove+0x10>
 80066e6:	4284      	cmp	r4, r0
 80066e8:	4623      	mov	r3, r4
 80066ea:	d807      	bhi.n	80066fc <memmove+0x20>
 80066ec:	1e43      	subs	r3, r0, #1
 80066ee:	42a1      	cmp	r1, r4
 80066f0:	d008      	beq.n	8006704 <memmove+0x28>
 80066f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066fa:	e7f8      	b.n	80066ee <memmove+0x12>
 80066fc:	4402      	add	r2, r0
 80066fe:	4601      	mov	r1, r0
 8006700:	428a      	cmp	r2, r1
 8006702:	d100      	bne.n	8006706 <memmove+0x2a>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800670a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670e:	e7f7      	b.n	8006700 <memmove+0x24>

08006710 <_free_r>:
 8006710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006712:	2900      	cmp	r1, #0
 8006714:	d044      	beq.n	80067a0 <_free_r+0x90>
 8006716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800671a:	9001      	str	r0, [sp, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f1a1 0404 	sub.w	r4, r1, #4
 8006722:	bfb8      	it	lt
 8006724:	18e4      	addlt	r4, r4, r3
 8006726:	f000 f913 	bl	8006950 <__malloc_lock>
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <_free_r+0x94>)
 800672c:	9801      	ldr	r0, [sp, #4]
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	b933      	cbnz	r3, 8006740 <_free_r+0x30>
 8006732:	6063      	str	r3, [r4, #4]
 8006734:	6014      	str	r4, [r2, #0]
 8006736:	b003      	add	sp, #12
 8006738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800673c:	f000 b90e 	b.w	800695c <__malloc_unlock>
 8006740:	42a3      	cmp	r3, r4
 8006742:	d908      	bls.n	8006756 <_free_r+0x46>
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1961      	adds	r1, r4, r5
 8006748:	428b      	cmp	r3, r1
 800674a:	bf01      	itttt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	1949      	addeq	r1, r1, r5
 8006752:	6021      	streq	r1, [r4, #0]
 8006754:	e7ed      	b.n	8006732 <_free_r+0x22>
 8006756:	461a      	mov	r2, r3
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	b10b      	cbz	r3, 8006760 <_free_r+0x50>
 800675c:	42a3      	cmp	r3, r4
 800675e:	d9fa      	bls.n	8006756 <_free_r+0x46>
 8006760:	6811      	ldr	r1, [r2, #0]
 8006762:	1855      	adds	r5, r2, r1
 8006764:	42a5      	cmp	r5, r4
 8006766:	d10b      	bne.n	8006780 <_free_r+0x70>
 8006768:	6824      	ldr	r4, [r4, #0]
 800676a:	4421      	add	r1, r4
 800676c:	1854      	adds	r4, r2, r1
 800676e:	42a3      	cmp	r3, r4
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	d1e0      	bne.n	8006736 <_free_r+0x26>
 8006774:	681c      	ldr	r4, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	6053      	str	r3, [r2, #4]
 800677a:	4421      	add	r1, r4
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	e7da      	b.n	8006736 <_free_r+0x26>
 8006780:	d902      	bls.n	8006788 <_free_r+0x78>
 8006782:	230c      	movs	r3, #12
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	e7d6      	b.n	8006736 <_free_r+0x26>
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	1961      	adds	r1, r4, r5
 800678c:	428b      	cmp	r3, r1
 800678e:	bf04      	itt	eq
 8006790:	6819      	ldreq	r1, [r3, #0]
 8006792:	685b      	ldreq	r3, [r3, #4]
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	bf04      	itt	eq
 8006798:	1949      	addeq	r1, r1, r5
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	6054      	str	r4, [r2, #4]
 800679e:	e7ca      	b.n	8006736 <_free_r+0x26>
 80067a0:	b003      	add	sp, #12
 80067a2:	bd30      	pop	{r4, r5, pc}
 80067a4:	2000022c 	.word	0x2000022c

080067a8 <sbrk_aligned>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	4e0e      	ldr	r6, [pc, #56]	; (80067e4 <sbrk_aligned+0x3c>)
 80067ac:	460c      	mov	r4, r1
 80067ae:	6831      	ldr	r1, [r6, #0]
 80067b0:	4605      	mov	r5, r0
 80067b2:	b911      	cbnz	r1, 80067ba <sbrk_aligned+0x12>
 80067b4:	f000 f8bc 	bl	8006930 <_sbrk_r>
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 f8b7 	bl	8006930 <_sbrk_r>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d00a      	beq.n	80067dc <sbrk_aligned+0x34>
 80067c6:	1cc4      	adds	r4, r0, #3
 80067c8:	f024 0403 	bic.w	r4, r4, #3
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d007      	beq.n	80067e0 <sbrk_aligned+0x38>
 80067d0:	1a21      	subs	r1, r4, r0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f8ac 	bl	8006930 <_sbrk_r>
 80067d8:	3001      	adds	r0, #1
 80067da:	d101      	bne.n	80067e0 <sbrk_aligned+0x38>
 80067dc:	f04f 34ff 	mov.w	r4, #4294967295
 80067e0:	4620      	mov	r0, r4
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	20000230 	.word	0x20000230

080067e8 <_malloc_r>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	1ccd      	adds	r5, r1, #3
 80067ee:	f025 0503 	bic.w	r5, r5, #3
 80067f2:	3508      	adds	r5, #8
 80067f4:	2d0c      	cmp	r5, #12
 80067f6:	bf38      	it	cc
 80067f8:	250c      	movcc	r5, #12
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	4607      	mov	r7, r0
 80067fe:	db01      	blt.n	8006804 <_malloc_r+0x1c>
 8006800:	42a9      	cmp	r1, r5
 8006802:	d905      	bls.n	8006810 <_malloc_r+0x28>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	2600      	movs	r6, #0
 800680a:	4630      	mov	r0, r6
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	4e2e      	ldr	r6, [pc, #184]	; (80068cc <_malloc_r+0xe4>)
 8006812:	f000 f89d 	bl	8006950 <__malloc_lock>
 8006816:	6833      	ldr	r3, [r6, #0]
 8006818:	461c      	mov	r4, r3
 800681a:	bb34      	cbnz	r4, 800686a <_malloc_r+0x82>
 800681c:	4629      	mov	r1, r5
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ffc2 	bl	80067a8 <sbrk_aligned>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	4604      	mov	r4, r0
 8006828:	d14d      	bne.n	80068c6 <_malloc_r+0xde>
 800682a:	6834      	ldr	r4, [r6, #0]
 800682c:	4626      	mov	r6, r4
 800682e:	2e00      	cmp	r6, #0
 8006830:	d140      	bne.n	80068b4 <_malloc_r+0xcc>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4631      	mov	r1, r6
 8006836:	4638      	mov	r0, r7
 8006838:	eb04 0803 	add.w	r8, r4, r3
 800683c:	f000 f878 	bl	8006930 <_sbrk_r>
 8006840:	4580      	cmp	r8, r0
 8006842:	d13a      	bne.n	80068ba <_malloc_r+0xd2>
 8006844:	6821      	ldr	r1, [r4, #0]
 8006846:	3503      	adds	r5, #3
 8006848:	1a6d      	subs	r5, r5, r1
 800684a:	f025 0503 	bic.w	r5, r5, #3
 800684e:	3508      	adds	r5, #8
 8006850:	2d0c      	cmp	r5, #12
 8006852:	bf38      	it	cc
 8006854:	250c      	movcc	r5, #12
 8006856:	4629      	mov	r1, r5
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ffa5 	bl	80067a8 <sbrk_aligned>
 800685e:	3001      	adds	r0, #1
 8006860:	d02b      	beq.n	80068ba <_malloc_r+0xd2>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	442b      	add	r3, r5
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	e00e      	b.n	8006888 <_malloc_r+0xa0>
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	1b52      	subs	r2, r2, r5
 800686e:	d41e      	bmi.n	80068ae <_malloc_r+0xc6>
 8006870:	2a0b      	cmp	r2, #11
 8006872:	d916      	bls.n	80068a2 <_malloc_r+0xba>
 8006874:	1961      	adds	r1, r4, r5
 8006876:	42a3      	cmp	r3, r4
 8006878:	6025      	str	r5, [r4, #0]
 800687a:	bf18      	it	ne
 800687c:	6059      	strne	r1, [r3, #4]
 800687e:	6863      	ldr	r3, [r4, #4]
 8006880:	bf08      	it	eq
 8006882:	6031      	streq	r1, [r6, #0]
 8006884:	5162      	str	r2, [r4, r5]
 8006886:	604b      	str	r3, [r1, #4]
 8006888:	4638      	mov	r0, r7
 800688a:	f104 060b 	add.w	r6, r4, #11
 800688e:	f000 f865 	bl	800695c <__malloc_unlock>
 8006892:	f026 0607 	bic.w	r6, r6, #7
 8006896:	1d23      	adds	r3, r4, #4
 8006898:	1af2      	subs	r2, r6, r3
 800689a:	d0b6      	beq.n	800680a <_malloc_r+0x22>
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	50a3      	str	r3, [r4, r2]
 80068a0:	e7b3      	b.n	800680a <_malloc_r+0x22>
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	bf0c      	ite	eq
 80068a8:	6032      	streq	r2, [r6, #0]
 80068aa:	605a      	strne	r2, [r3, #4]
 80068ac:	e7ec      	b.n	8006888 <_malloc_r+0xa0>
 80068ae:	4623      	mov	r3, r4
 80068b0:	6864      	ldr	r4, [r4, #4]
 80068b2:	e7b2      	b.n	800681a <_malloc_r+0x32>
 80068b4:	4634      	mov	r4, r6
 80068b6:	6876      	ldr	r6, [r6, #4]
 80068b8:	e7b9      	b.n	800682e <_malloc_r+0x46>
 80068ba:	230c      	movs	r3, #12
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4638      	mov	r0, r7
 80068c0:	f000 f84c 	bl	800695c <__malloc_unlock>
 80068c4:	e7a1      	b.n	800680a <_malloc_r+0x22>
 80068c6:	6025      	str	r5, [r4, #0]
 80068c8:	e7de      	b.n	8006888 <_malloc_r+0xa0>
 80068ca:	bf00      	nop
 80068cc:	2000022c 	.word	0x2000022c

080068d0 <_realloc_r>:
 80068d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d4:	4680      	mov	r8, r0
 80068d6:	4614      	mov	r4, r2
 80068d8:	460e      	mov	r6, r1
 80068da:	b921      	cbnz	r1, 80068e6 <_realloc_r+0x16>
 80068dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	4611      	mov	r1, r2
 80068e2:	f7ff bf81 	b.w	80067e8 <_malloc_r>
 80068e6:	b92a      	cbnz	r2, 80068f4 <_realloc_r+0x24>
 80068e8:	f7ff ff12 	bl	8006710 <_free_r>
 80068ec:	4625      	mov	r5, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f4:	f000 f838 	bl	8006968 <_malloc_usable_size_r>
 80068f8:	4284      	cmp	r4, r0
 80068fa:	4607      	mov	r7, r0
 80068fc:	d802      	bhi.n	8006904 <_realloc_r+0x34>
 80068fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006902:	d812      	bhi.n	800692a <_realloc_r+0x5a>
 8006904:	4621      	mov	r1, r4
 8006906:	4640      	mov	r0, r8
 8006908:	f7ff ff6e 	bl	80067e8 <_malloc_r>
 800690c:	4605      	mov	r5, r0
 800690e:	2800      	cmp	r0, #0
 8006910:	d0ed      	beq.n	80068ee <_realloc_r+0x1e>
 8006912:	42bc      	cmp	r4, r7
 8006914:	4622      	mov	r2, r4
 8006916:	4631      	mov	r1, r6
 8006918:	bf28      	it	cs
 800691a:	463a      	movcs	r2, r7
 800691c:	f7ff fed0 	bl	80066c0 <memcpy>
 8006920:	4631      	mov	r1, r6
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fef4 	bl	8006710 <_free_r>
 8006928:	e7e1      	b.n	80068ee <_realloc_r+0x1e>
 800692a:	4635      	mov	r5, r6
 800692c:	e7df      	b.n	80068ee <_realloc_r+0x1e>
	...

08006930 <_sbrk_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d06      	ldr	r5, [pc, #24]	; (800694c <_sbrk_r+0x1c>)
 8006934:	2300      	movs	r3, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fa fc2c 	bl	8001198 <_sbrk>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_sbrk_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_sbrk_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000234 	.word	0x20000234

08006950 <__malloc_lock>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__malloc_lock+0x8>)
 8006952:	f000 b811 	b.w	8006978 <__retarget_lock_acquire_recursive>
 8006956:	bf00      	nop
 8006958:	20000238 	.word	0x20000238

0800695c <__malloc_unlock>:
 800695c:	4801      	ldr	r0, [pc, #4]	; (8006964 <__malloc_unlock+0x8>)
 800695e:	f000 b80c 	b.w	800697a <__retarget_lock_release_recursive>
 8006962:	bf00      	nop
 8006964:	20000238 	.word	0x20000238

08006968 <_malloc_usable_size_r>:
 8006968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696c:	1f18      	subs	r0, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfbc      	itt	lt
 8006972:	580b      	ldrlt	r3, [r1, r0]
 8006974:	18c0      	addlt	r0, r0, r3
 8006976:	4770      	bx	lr

08006978 <__retarget_lock_acquire_recursive>:
 8006978:	4770      	bx	lr

0800697a <__retarget_lock_release_recursive>:
 800697a:	4770      	bx	lr

0800697c <_init>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	bf00      	nop
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr

08006988 <_fini>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr
